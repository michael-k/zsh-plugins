#compdef go vgo

# ------------------------------------------------------------------------------
# Copyright (c) 2017- The Go Authors
# Copyright (c) 2016 Github zsh-users - http://github.com/zsh-users
# Copyright (c) 2013-2015 Robby Russell and contributors (see
# https://github.com/robbyrussell/oh-my-zsh/contributors)
# Copyright (c) 2010-2014 Go authors
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the zsh-users nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL ZSH-USERS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# ------------------------------------------------------------------------------
# Description
# -----------
#
#  Completion script for go (http://golang.org).
#
# ------------------------------------------------------------------------------
# Authors
# -------
#
#  * Mikkel Oscar Lyderik <mikkeloscar@gmail.com>
#  * oh-my-zsh authors:
#        https://github.com/robbyrussell/oh-my-zsh/blob/master/plugins/golang/golang.plugin.zsh
#  * Go Authors
#
# ------------------------------------------------------------------------------
#
# go.googlesource.com/go
#
# ------------------------------------------------------------------------------
#
# usage: go bug
#
# Bug opens the default browser and starts a new bug report.
# The report includes useful system information.
#
# ------------------------------------------------------------------------------
#
# usage: go build [-o output] [-i] [build flags] [packages]
#
# Build compiles the packages named by the import paths,
# along with their dependencies, but it does not install the results.
#
# If the arguments to build are a list of .go files, build treats
# them as a list of source files specifying a single package.
#
# When compiling a single main package, build writes
# the resulting executable to an output file named after
# the first source file ('go build ed.go rx.go' writes 'ed' or 'ed.exe')
# or the source code directory ('go build unix/sam' writes 'sam' or 'sam.exe').
# The '.exe' suffix is added when writing a Windows executable.
#
# When compiling multiple packages or a single non-main package,
# build compiles the packages but discards the resulting object,
# serving only as a check that the packages can be built.
#
# When compiling packages, build ignores files that end in '_test.go'.
#
# The -o flag, only allowed when compiling a single package,
# forces build to write the resulting executable or object
# to the named output file, instead of the default behavior described
# in the last two paragraphs.
#
# The -i flag installs the packages that are dependencies of the target.
#
# The build flags are shared by the build, clean, get, install, list, run,
# and test commands:
#
# 	-a
# 		force rebuilding of packages that are already up-to-date.
# 	-n
# 		print the commands but do not run them.
# 	-p n
# 		the number of programs, such as build commands or
# 		test binaries, that can be run in parallel.
# 		The default is the number of CPUs available.
# 	-race
# 		enable data race detection.
# 		Supported only on linux/amd64, freebsd/amd64, darwin/amd64 and windows/amd64.
# 	-msan
# 		enable interoperation with memory sanitizer.
# 		Supported only on linux/amd64, linux/arm64
# 		and only with Clang/LLVM as the host C compiler.
# 	-v
# 		print the names of packages as they are compiled.
# 	-work
# 		print the name of the temporary work directory and
# 		do not delete it when exiting.
# 	-x
# 		print the commands.
#
# 	-asmflags '[pattern=]arg list'
# 		arguments to pass on each go tool asm invocation.
# 	-buildmode mode
# 		build mode to use. See 'go help buildmode' for more.
# 	-compiler name
# 		name of compiler to use, as in runtime.Compiler (gccgo or gc).
# 	-gccgoflags '[pattern=]arg list'
# 		arguments to pass on each gccgo compiler/linker invocation.
# 	-gcflags '[pattern=]arg list'
# 		arguments to pass on each go tool compile invocation.
# 	-getmode mode
# 		module download mode to use. See 'go help modules' for more.
# 	-installsuffix suffix
# 		a suffix to use in the name of the package installation directory,
# 		in order to keep output separate from default builds.
# 		If using the -race flag, the install suffix is automatically set to race
# 		or, if set explicitly, has _race appended to it. Likewise for the -msan
# 		flag. Using a -buildmode option that requires non-default compile flags
# 		has a similar effect.
# 	-ldflags '[pattern=]arg list'
# 		arguments to pass on each go tool link invocation.
# 	-linkshared
# 		link against shared libraries previously created with
# 		-buildmode=shared.
# 	-pkgdir dir
# 		install and load all packages from dir instead of the usual locations.
# 		For example, when building with a non-standard configuration,
# 		use -pkgdir to keep generated packages in a separate location.
# 	-tags 'tag list'
# 		a space-separated list of build tags to consider satisfied during the
# 		build. For more information about build tags, see the description of
# 		build constraints in the documentation for the go/build package.
# 	-toolexec 'cmd args'
# 		a program to use to invoke toolchain programs like vet and asm.
# 		For example, instead of running asm, the go command will run
# 		'cmd args /path/to/asm <arguments for asm>'.
#
# The -asmflags, -gccgoflags, -gcflags, and -ldflags flags accept a
# space-separated list of arguments to pass to an underlying tool
# during the build. To embed spaces in an element in the list, surround
# it with either single or double quotes. The argument list may be
# preceded by a package pattern and an equal sign, which restricts
# the use of that argument list to the building of packages matching
# that pattern (see 'go help packages' for a description of package
# patterns). Without a pattern, the argument list applies only to the
# packages named on the command line. The flags may be repeated
# with different patterns in order to specify different arguments for
# different sets of packages. If a package matches patterns given in
# multiple flags, the latest match on the command line wins.
# For example, 'go build -gcflags=-S fmt' prints the disassembly
# only for package fmt, while 'go build -gcflags=all=-S fmt'
# prints the disassembly for fmt and all its dependencies.
#
# For more about specifying packages, see 'go help packages'.
# For more about where packages and binaries are installed,
# run 'go help gopath'.
# For more about calling between Go and C/C++, run 'go help c'.
#
# Note: Build adheres to certain conventions such as those described
# by 'go help gopath'. Not all projects can follow these conventions,
# however. Installations that have their own conventions or that use
# a separate software build system may choose to use lower-level
# invocations such as 'go tool compile' and 'go tool link' to avoid
# some of the overheads and design decisions of the build tool.
#
# See also: go install, go get, go clean.
#
# ------------------------------------------------------------------------------
#
# usage: go clean [clean flags] [build flags] [packages]
#
# Clean removes object files from package source directories.
# The go command builds most objects in a temporary directory,
# so go clean is mainly concerned with object files left by other
# tools or by manual invocations of go build.
#
# Specifically, clean removes the following files from each of the
# source directories corresponding to the import paths:
#
# 	_obj/            old object directory, left from Makefiles
# 	_test/           old test directory, left from Makefiles
# 	_testmain.go     old gotest file, left from Makefiles
# 	test.out         old test log, left from Makefiles
# 	build.out        old test log, left from Makefiles
# 	*.[568ao]        object files, left from Makefiles
#
# 	DIR(.exe)        from go build
# 	DIR.test(.exe)   from go test -c
# 	MAINFILE(.exe)   from go build MAINFILE.go
# 	*.so             from SWIG
#
# In the list, DIR represents the final path element of the
# directory, and MAINFILE is the base name of any Go source
# file in the directory that is not included when building
# the package.
#
# The -i flag causes clean to remove the corresponding installed
# archive or binary (what 'go install' would create).
#
# The -n flag causes clean to print the remove commands it would execute,
# but not run them.
#
# The -r flag causes clean to be applied recursively to all the
# dependencies of the packages named by the import paths.
#
# The -x flag causes clean to print remove commands as it executes them.
#
# The -cache flag causes clean to remove the entire go build cache.
#
# The -testcache flag causes clean to expire all test results in the
# go build cache.
#
# The -modcache flag causes clean to remove the entire module
# download cache, including unpacked source code of versioned
# dependencies.
#
# For more about build flags, see 'go help build'.
#
# For more about specifying packages, see 'go help packages'.
#
# ------------------------------------------------------------------------------
#
# usage: go doc [-u] [-c] [package|[package.]symbol[.methodOrField]]
#
# Doc prints the documentation comments associated with the item identified by its
# arguments (a package, const, func, type, var, method, or struct field)
# followed by a one-line summary of each of the first-level items "under"
# that item (package-level declarations for a package, methods for a type,
# etc.).
#
# Doc accepts zero, one, or two arguments.
#
# Given no arguments, that is, when run as
#
# 	go doc
#
# it prints the package documentation for the package in the current directory.
# If the package is a command (package main), the exported symbols of the package
# are elided from the presentation unless the -cmd flag is provided.
#
# When run with one argument, the argument is treated as a Go-syntax-like
# representation of the item to be documented. What the argument selects depends
# on what is installed in GOROOT and GOPATH, as well as the form of the argument,
# which is schematically one of these:
#
# 	go doc <pkg>
# 	go doc <sym>[.<methodOrField>]
# 	go doc [<pkg>.]<sym>[.<methodOrField>]
# 	go doc [<pkg>.][<sym>.]<methodOrField>
#
# The first item in this list matched by the argument is the one whose documentation
# is printed. (See the examples below.) However, if the argument starts with a capital
# letter it is assumed to identify a symbol or method in the current directory.
#
# For packages, the order of scanning is determined lexically in breadth-first order.
# That is, the package presented is the one that matches the search and is nearest
# the root and lexically first at its level of the hierarchy. The GOROOT tree is
# always scanned in its entirety before GOPATH.
#
# If there is no package specified or matched, the package in the current
# directory is selected, so "go doc Foo" shows the documentation for symbol Foo in
# the current package.
#
# The package path must be either a qualified path or a proper suffix of a
# path. The go tool's usual package mechanism does not apply: package path
# elements like . and ... are not implemented by go doc.
#
# When run with two arguments, the first must be a full package path (not just a
# suffix), and the second is a symbol, or symbol with method or struct field.
# This is similar to the syntax accepted by godoc:
#
# 	go doc <pkg> <sym>[.<methodOrField>]
#
# In all forms, when matching symbols, lower-case letters in the argument match
# either case but upper-case letters match exactly. This means that there may be
# multiple matches of a lower-case argument in a package if different symbols have
# different cases. If this occurs, documentation for all matches is printed.
#
# Examples:
# 	go doc
# 		Show documentation for current package.
# 	go doc Foo
# 		Show documentation for Foo in the current package.
# 		(Foo starts with a capital letter so it cannot match
# 		a package path.)
# 	go doc encoding/json
# 		Show documentation for the encoding/json package.
# 	go doc json
# 		Shorthand for encoding/json.
# 	go doc json.Number (or go doc json.number)
# 		Show documentation and method summary for json.Number.
# 	go doc json.Number.Int64 (or go doc json.number.int64)
# 		Show documentation for json.Number's Int64 method.
# 	go doc cmd/doc
# 		Show package docs for the doc command.
# 	go doc -cmd cmd/doc
# 		Show package docs and exported symbols within the doc command.
# 	go doc template.new
# 		Show documentation for html/template's New function.
# 		(html/template is lexically before text/template)
# 	go doc text/template.new # One argument
# 		Show documentation for text/template's New function.
# 	go doc text/template new # Two arguments
# 		Show documentation for text/template's New function.
#
# 	At least in the current tree, these invocations all print the
# 	documentation for json.Decoder's Decode method:
#
# 	go doc json.Decoder.Decode
# 	go doc json.decoder.decode
# 	go doc json.decode
# 	cd go/src/encoding/json; go doc decode
#
# Flags:
# 	-c
# 		Respect case when matching symbols.
# 	-cmd
# 		Treat a command (package main) like a regular package.
# 		Otherwise package main's exported symbols are hidden
# 		when showing the package's top-level documentation.
# 	-u
# 		Show documentation for unexported as well as exported
# 		symbols, methods, and fields.
#
# ------------------------------------------------------------------------------
#
# usage: go env [-json] [var ...]
#
# Env prints Go environment information.
#
# By default env prints information as a shell script
# (on Windows, a batch file). If one or more variable
# names is given as arguments, env prints the value of
# each named variable on its own line.
#
# The -json flag prints the environment in JSON format
# instead of as a shell script.
#
# For more about environment variables, see 'go help environment'.
#
# ------------------------------------------------------------------------------
#
# usage: go fix [packages]
#
# Fix runs the Go fix command on the packages named by the import paths.
#
# For more about fix, see 'go doc cmd/fix'.
# For more about specifying packages, see 'go help packages'.
#
# To run fix with specific options, run 'go tool fix'.
#
# See also: go fmt, go vet.
#
# ------------------------------------------------------------------------------
#
# usage: go fmt [-n] [-x] [packages]
#
# Fmt runs the command 'gofmt -l -w' on the packages named
# by the import paths. It prints the names of the files that are modified.
#
# For more about gofmt, see 'go doc cmd/gofmt'.
# For more about specifying packages, see 'go help packages'.
#
# The -n flag prints commands that would be executed.
# The -x flag prints commands as they are executed.
#
# To run gofmt with specific options, run gofmt itself.
#
# See also: go fix, go vet.
#
# ------------------------------------------------------------------------------
#
# usage: go generate [-run regexp] [-n] [-v] [-x] [build flags] [file.go... | packages]
#
# Generate runs commands described by directives within existing
# files. Those commands can run any process but the intent is to
# create or update Go source files.
#
# Go generate is never run automatically by go build, go get, go test,
# and so on. It must be run explicitly.
#
# Go generate scans the file for directives, which are lines of
# the form,
#
# 	//go:generate command argument...
#
# (note: no leading spaces and no space in "//go") where command
# is the generator to be run, corresponding to an executable file
# that can be run locally. It must either be in the shell path
# (gofmt), a fully qualified path (/usr/you/bin/mytool), or a
# command alias, described below.
#
# To convey to humans and machine tools that code is generated,
# generated source should have a line early in the file that
# matches the following regular expression (in Go syntax):
#
# 	^// Code generated .* DO NOT EDIT\.$
#
# Note that go generate does not parse the file, so lines that look
# like directives in comments or multiline strings will be treated
# as directives.
#
# The arguments to the directive are space-separated tokens or
# double-quoted strings passed to the generator as individual
# arguments when it is run.
#
# Quoted strings use Go syntax and are evaluated before execution; a
# quoted string appears as a single argument to the generator.
#
# Go generate sets several variables when it runs the generator:
#
# 	$GOARCH
# 		The execution architecture (arm, amd64, etc.)
# 	$GOOS
# 		The execution operating system (linux, windows, etc.)
# 	$GOFILE
# 		The base name of the file.
# 	$GOLINE
# 		The line number of the directive in the source file.
# 	$GOPACKAGE
# 		The name of the package of the file containing the directive.
# 	$DOLLAR
# 		A dollar sign.
#
# Other than variable substitution and quoted-string evaluation, no
# special processing such as "globbing" is performed on the command
# line.
#
# As a last step before running the command, any invocations of any
# environment variables with alphanumeric names, such as $GOFILE or
# $HOME, are expanded throughout the command line. The syntax for
# variable expansion is $NAME on all operating systems. Due to the
# order of evaluation, variables are expanded even inside quoted
# strings. If the variable NAME is not set, $NAME expands to the
# empty string.
#
# A directive of the form,
#
# 	//go:generate -command xxx args...
#
# specifies, for the remainder of this source file only, that the
# string xxx represents the command identified by the arguments. This
# can be used to create aliases or to handle multiword generators.
# For example,
#
# 	//go:generate -command foo go tool foo
#
# specifies that the command "foo" represents the generator
# "go tool foo".
#
# Generate processes packages in the order given on the command line,
# one at a time. If the command line lists .go files, they are treated
# as a single package. Within a package, generate processes the
# source files in a package in file name order, one at a time. Within
# a source file, generate runs generators in the order they appear
# in the file, one at a time.
#
# If any generator returns an error exit status, "go generate" skips
# all further processing for that package.
#
# The generator is run in the package's source directory.
#
# Go generate accepts one specific flag:
#
# 	-run=""
# 		if non-empty, specifies a regular expression to select
# 		directives whose full original source text (excluding
# 		any trailing spaces and final newline) matches the
# 		expression.
#
# It also accepts the standard build flags including -v, -n, and -x.
# The -v flag prints the names of packages and files as they are
# processed.
# The -n flag prints commands that would be executed.
# The -x flag prints commands as they are executed.
#
# For more about build flags, see 'go help build'.
#
# For more about specifying packages, see 'go help packages'.
#
# ------------------------------------------------------------------------------
#
# usage: go get [-d] [-f] [-t] [-u] [-v] [-fix] [-insecure] [build flags] [packages]
#
# Get downloads the packages named by the import paths, along with their
# dependencies. It then installs the named packages, like 'go install'.
#
# The -d flag instructs get to stop after downloading the packages; that is,
# it instructs get not to install the packages.
#
# The -f flag, valid only when -u is set, forces get -u not to verify that
# each package has been checked out from the source control repository
# implied by its import path. This can be useful if the source is a local fork
# of the original.
#
# The -fix flag instructs get to run the fix tool on the downloaded packages
# before resolving dependencies or building the code.
#
# The -insecure flag permits fetching from repositories and resolving
# custom domains using insecure schemes such as HTTP. Use with caution.
#
# The -t flag instructs get to also download the packages required to build
# the tests for the specified packages.
#
# The -u flag instructs get to use the network to update the named packages
# and their dependencies. By default, get uses the network to check out
# missing packages but does not use it to look for updates to existing packages.
#
# The -v flag enables verbose progress and debug output.
#
# Get also accepts build flags to control the installation. See 'go help build'.
#
# When checking out a new package, get creates the target directory
# GOPATH/src/<import-path>. If the GOPATH contains multiple entries,
# get uses the first one. For more details see: 'go help gopath'.
#
# When checking out or updating a package, get looks for a branch or tag
# that matches the locally installed version of Go. The most important
# rule is that if the local installation is running version "go1", get
# searches for a branch or tag named "go1". If no such version exists
# it retrieves the default branch of the package.
#
# When go get checks out or updates a Git repository,
# it also updates any git submodules referenced by the repository.
#
# Get never checks out or updates code stored in vendor directories.
#
# For more about specifying packages, see 'go help packages'.
#
# For more about how 'go get' finds source code to
# download, see 'go help importpath'.
#
# This text describes the behavior of get when using GOPATH
# to manage source code and dependencies.
# If instead the go command is running in module-aware mode,
# the details of get's flags and effects change, as does 'go help get'.
# See 'go help modules' and 'go help module-get'.
#
# See also: go build, go install, go clean.
#
# ------------------------------------------------------------------------------
#
# usage: go install [-i] [build flags] [packages]
#
# Install compiles and installs the packages named by the import paths.
#
# The -i flag installs the dependencies of the named packages as well.
#
# For more about the build flags, see 'go help build'.
# For more about specifying packages, see 'go help packages'.
#
# See also: go build, go get, go clean.
#
# ------------------------------------------------------------------------------
#
# usage: go list [-f format] [-json] [-m] [list flags] [build flags] [packages]
#
# List lists the named packages, one per line.
# The most commonly-used flags are -f and -json, which control the form
# of the output printed for each package. Other list flags, documented below,
# control more specific details.
#
# The default output shows the package import path:
#
#     bytes
#     encoding/json
#     github.com/gorilla/mux
#     golang.org/x/net/html
#
# The -f flag specifies an alternate format for the list, using the
# syntax of package template. The default output is equivalent
# to -f '{{.ImportPath}}'. The struct being passed to the template is:
#
#     type Package struct {
#         Dir           string   // directory containing package sources
#         ImportPath    string   // import path of package in dir
#         ImportComment string   // path in import comment on package statement
#         Name          string   // package name
#         Doc           string   // package documentation string
#         Target        string   // install path
#         Shlib         string   // the shared library that contains this package (only set when -linkshared)
#         Goroot        bool     // is this package in the Go root?
#         Standard      bool     // is this package part of the standard Go library?
#         Stale         bool     // would 'go install' do anything for this package?
#         StaleReason   string   // explanation for Stale==true
#         Root          string   // Go root or Go path dir containing this package
#         ConflictDir   string   // this directory shadows Dir in $GOPATH
#         BinaryOnly    bool     // binary-only package: cannot be recompiled from sources
#         ForTest       string   // package is only for use in named test
#         Export        string   // file containing export data (when using -export)
#         Module        *Module  // info about package's containing module, if any (can be nil)
#         Match         []string // command-line patterns matching this package
#         DepOnly       bool     // package is only a dependency, not explicitly listed
#
#         // Source files
#         GoFiles         []string // .go source files (excluding CgoFiles, TestGoFiles, XTestGoFiles)
#         CgoFiles        []string // .go source files that import "C"
#         CompiledGoFiles []string // .go files presented to compiler (when using -compiled)
#         IgnoredGoFiles  []string // .go source files ignored due to build constraints
#         CFiles          []string // .c source files
#         CXXFiles        []string // .cc, .cxx and .cpp source files
#         MFiles          []string // .m source files
#         HFiles          []string // .h, .hh, .hpp and .hxx source files
#         FFiles          []string // .f, .F, .for and .f90 Fortran source files
#         SFiles          []string // .s source files
#         SwigFiles       []string // .swig files
#         SwigCXXFiles    []string // .swigcxx files
#         SysoFiles       []string // .syso object files to add to archive
#         TestGoFiles     []string // _test.go files in package
#         XTestGoFiles    []string // _test.go files outside package
#
#         // Cgo directives
#         CgoCFLAGS    []string // cgo: flags for C compiler
#         CgoCPPFLAGS  []string // cgo: flags for C preprocessor
#         CgoCXXFLAGS  []string // cgo: flags for C++ compiler
#         CgoFFLAGS    []string // cgo: flags for Fortran compiler
#         CgoLDFLAGS   []string // cgo: flags for linker
#         CgoPkgConfig []string // cgo: pkg-config names
#
#         // Dependency information
#         Imports      []string          // import paths used by this package
#         ImportMap    map[string]string // map from source import to ImportPath (identity entries omitted)
#         Deps         []string          // all (recursively) imported dependencies
#         TestImports  []string          // imports from TestGoFiles
#         XTestImports []string          // imports from XTestGoFiles
#
#         // Error information
#         Incomplete bool            // this package or a dependency has an error
#         Error      *PackageError   // error loading package
#         DepsErrors []*PackageError // errors loading dependencies
#     }
#
# Packages stored in vendor directories report an ImportPath that includes the
# path to the vendor directory (for example, "d/vendor/p" instead of "p"),
# so that the ImportPath uniquely identifies a given copy of a package.
# The Imports, Deps, TestImports, and XTestImports lists also contain these
# expanded import paths. See golang.org/s/go15vendor for more about vendoring.
#
# The error information, if any, is
#
#     type PackageError struct {
#         ImportStack   []string // shortest path from package named on command line to this one
#         Pos           string   // position of error (if present, file:line:col)
#         Err           string   // the error itself
#     }
#
# The module information is a Module struct, defined in the discussion
# of list -m below.
#
# The template function "join" calls strings.Join.
#
# The template function "context" returns the build context, defined as:
#
#     type Context struct {
#         GOARCH        string   // target architecture
#         GOOS          string   // target operating system
#         GOROOT        string   // Go root
#         GOPATH        string   // Go path
#         CgoEnabled    bool     // whether cgo can be used
#         UseAllFiles   bool     // use files regardless of +build lines, file names
#         Compiler      string   // compiler to assume when computing target paths
#         BuildTags     []string // build constraints to match in +build lines
#         ReleaseTags   []string // releases the current release is compatible with
#         InstallSuffix string   // suffix to use in the name of the install dir
#     }
#
# For more information about the meaning of these fields see the documentation
# for the go/build package's Context type.
#
# The -json flag causes the package data to be printed in JSON format
# instead of using the template format.
#
# The -compiled flag causes list to set CompiledGoFiles to the Go source
# files presented to the compiler. Typically this means that it repeats
# the files listed in GoFiles and then also adds the Go code generated
# by processing CgoFiles and SwigFiles. The Imports list contains the
# union of all imports from both GoFiles and CompiledGoFiles.
#
# The -deps flag causes list to iterate over not just the named packages
# but also all their dependencies. It visits them in a depth-first post-order
# traversal, so that a package is listed only after all its dependencies.
# Packages not explicitly listed on the command line will have the DepOnly
# field set to true.
#
# The -e flag changes the handling of erroneous packages, those that
# cannot be found or are malformed. By default, the list command
# prints an error to standard error for each erroneous package and
# omits the packages from consideration during the usual printing.
# With the -e flag, the list command never prints errors to standard
# error and instead processes the erroneous packages with the usual
# printing. Erroneous packages will have a non-empty ImportPath and
# a non-nil Error field; other information may or may not be missing
# (zeroed).
#
# The -export flag causes list to set the Export field to the name of a
# file containing up-to-date export information for the given package.
#
# The -find flag causes list to identify the named packages but not
# resolve their dependencies: the Imports and Deps lists will be empty.
#
# The -test flag causes list to report not only the named packages
# but also their test binaries (for packages with tests), to convey to
# source code analysis tools exactly how test binaries are constructed.
# The reported import path for a test binary is the import path of
# the package followed by a ".test" suffix, as in "math/rand.test".
# When building a test, it is sometimes necessary to rebuild certain
# dependencies specially for that test (most commonly the tested
# package itself). The reported import path of a package recompiled
# for a particular test binary is followed by a space and the name of
# the test binary in brackets, as in "math/rand [math/rand.test]"
# or "regexp [sort.test]". The ForTest field is also set to the name
# of the package being tested ("math/rand" or "sort" in the previous
# examples).
#
# The Dir, Target, Shlib, Root, ConflictDir, and Export file paths
# are all absolute paths.
#
# By default, the lists GoFiles, CgoFiles, and so on hold names of files in Dir
# (that is, paths relative to Dir, not absolute paths).
# The generated files added when using the -compiled and -test flags
# are absolute paths referring to cached copies of generated Go source files.
# Although they are Go source files, the paths may not end in ".go".
#
# The -m flag causes list to list modules instead of packages.
#
# When listing modules, the -f flag still specifies a format template
# applied to a Go struct, but now a Module struct:
#
#     type Module struct {
#         Path     string       // module path
#         Version  string       // module version
#         Versions []string     // available module versions (with -versions)
#         Replace  *Module      // replaced by this module
#         Time     *time.Time   // time version was created
#         Update   *Module      // available update, if any (with -u)
#         Main     bool         // is this the main module?
#         Indirect bool         // is this module only an indirect dependency of main module?
#         Dir      string       // directory holding files for this module, if any
#         GoMod    string       // path to go.mod file for this module, if any
#         Error    *ModuleError // error loading module
#     }
#
#     type ModuleError struct {
#         Err string // the error itself
#     }
#
# The default output is to print the module path and then
# information about the version and replacement if any.
# For example, 'go list -m all' might print:
#
#     my/main/module
#     golang.org/x/text v0.3.0 => /tmp/text
#     rsc.io/pdf v0.1.1
#
# The Module struct has a String method that formats this
# line of output, so that the default format is equivalent
# to -f '{{.String}}'.
#
# Note that when a module has been replaced, its Replace field
# describes the replacement module, and its Dir field is set to
# the replacement's source code, if present. (That is, if Replace
# is non-nil, then Dir is set to Replace.Dir, with no access to
# the replaced source code.)
#
# The -u flag adds information about available upgrades.
# When the latest version of a given module is newer than
# the current one, list -u sets the Module's Update field
# to information about the newer module.
# The Module's String method indicates an available upgrade by
# formatting the newer version in brackets after the current version.
# For example, 'go list -m -u all' might print:
#
#     my/main/module
#     golang.org/x/text v0.3.0 [v0.4.0] => /tmp/text
#     rsc.io/pdf v0.1.1 [v0.1.2]
#
# (For tools, 'go list -m -u -json all' may be more convenient to parse.)
#
# The -versions flag causes list to set the Module's Versions field
# to a list of all known versions of that module, ordered according
# to semantic versioning, earliest to latest. The flag also changes
# the default output format to display the module path followed by the
# space-separated version list.
#
# The arguments to list -m are interpreted as a list of modules, not packages.
# The main module is the module containing the current directory.
# The active modules are the main module and its dependencies.
# With no arguments, list -m shows the main module.
# With arguments, list -m shows the modules specified by the arguments.
# Any of the active modules can be specified by its module path.
# The special pattern "all" specifies all the active modules, first the main
# module and then dependencies sorted by module path.
# A pattern containing "..." specifies the active modules whose
# module paths match the pattern.
# A query of the form path@version specifies the result of that query,
# which is not limited to active modules.
# See 'go help modules' for more about module queries.
#
# The template function "module" takes a single string argument
# that must be a module path or query and returns the specified
# module as a Module struct. If an error occurs, the result will
# be a Module struct with a non-nil Error field.
#
# For more about build flags, see 'go help build'.
#
# For more about specifying packages, see 'go help packages'.
#
# For more about modules, see 'go help modules'.
#
# ------------------------------------------------------------------------------
#
# Go mod provides access to operations on modules.
#
# Note that support for modules is built into all the go commands,
# not just 'go mod'. For example, day-to-day adding, removing, upgrading,
# and downgrading of dependencies should be done using 'go get'.
# See 'go help modules' for an overview of module functionality.
#
# Usage:
#
# 	go mod <command> [arguments]
#
# The commands are:
#
# 	download    download modules to local cache
# 	edit        edit go.mod from tools or scripts
# 	graph       print module requirement graph
# 	init        initialize new module in current directory
# 	tidy        add missing and remove unused modules
# 	vendor      make vendored copy of dependencies
# 	verify      verify dependencies have expected content
# 	why         explain why packages or modules are needed
#
# Use "go help mod <command>" for more information about a command.
#
# ------------------------------------------------------------------------------
#
# usage: go mod download [-json] [modules]
#
# Download downloads the named modules, which can be module patterns selecting
# dependencies of the main module or module queries of the form path@version.
# With no arguments, download applies to all dependencies of the main module.
#
# The go command will automatically download modules as needed during ordinary
# execution. The "go mod download" command is useful mainly for pre-filling
# the local cache or to compute the answers for a Go module proxy.
#
# By default, download reports errors to standard error but is otherwise silent.
# The -json flag causes download to print a sequence of JSON objects
# to standard output, describing each downloaded module (or failure),
# corresponding to this Go struct:
#
#     type Module struct {
#         Path     string // module path
#         Version  string // module version
#         Error    string // error loading module
#         Info     string // absolute path to cached .info file
#         GoMod    string // absolute path to cached .mod file
#         Zip      string // absolute path to cached .zip file
#         Dir      string // absolute path to cached source root directory
#         Sum      string // checksum for path, version (as in go.sum)
#         GoModSum string // checksum for go.mod (as in go.sum)
#     }
#
# See 'go help modules' for more about module queries.
#
# ------------------------------------------------------------------------------
#
# usage: go mod edit [editing flags] [go.mod]
#
# Edit provides a command-line interface for editing go.mod,
# for use primarily by tools or scripts. It reads only go.mod;
# it does not look up information about the modules involved.
# By default, edit reads and writes the go.mod file of the main module,
# but a different target file can be specified after the editing flags.
#
# The editing flags specify a sequence of editing operations.
#
# The -fmt flag reformats the go.mod file without making other changes.
# This reformatting is also implied by any other modifications that use or
# rewrite the go.mod file. The only time this flag is needed is if no other
# flags are specified, as in 'go mod edit -fmt'.
#
# The -module flag changes the module's path (the go.mod file's module line).
#
# The -require=path@version and -droprequire=path flags
# add and drop a requirement on the given module path and version.
# Note that -require overrides any existing requirements on path.
# These flags are mainly for tools that understand the module graph.
# Users should prefer 'go get path@version' or 'go get path@none',
# which make other go.mod adjustments as needed to satisfy
# constraints imposed by other modules.
#
# The -exclude=path@version and -dropexclude=path@version flags
# add and drop an exclusion for the given module path and version.
# Note that -exclude=path@version is a no-op if that exclusion already exists.
#
# The -replace=old[@v]=new[@v] and -dropreplace=old[@v] flags
# add and drop a replacement of the given module path and version pair.
# If the @v in old@v is omitted, the replacement applies to all versions
# with the old module path. If the @v in new@v is omitted, the new path
# should be a local module root directory, not a module path.
# Note that -replace overrides any existing replacements for old[@v].
#
# The -require, -droprequire, -exclude, -dropexclude, -replace,
# and -dropreplace editing flags may be repeated, and the changes
# are applied in the order given.
#
# The -print flag prints the final go.mod in its text format instead of
# writing it back to go.mod.
#
# The -json flag prints the final go.mod file in JSON format instead of
# writing it back to go.mod. The JSON output corresponds to these Go types:
#
# 	type Module struct {
# 		Path string
# 		Version string
# 	}
#
# 	type GoMod struct {
# 		Module Module
# 		Require []Require
# 		Exclude []Module
# 		Replace []Replace
# 	}
#
# 	type Require struct {
# 		Path string
# 		Version string
# 		Indirect bool
# 	}
#
# 	type Replace struct {
# 		Old Module
# 		New Module
# 	}
#
# Note that this only describes the go.mod file itself, not other modules
# referred to indirectly. For the full set of modules available to a build,
# use 'go list -m -json all'.
#
# For example, a tool can obtain the go.mod as a data structure by
# parsing the output of 'go mod edit -json' and can then make changes
# by invoking 'go mod edit' with -require, -exclude, and so on.
#
# ------------------------------------------------------------------------------
#
# usage: go mod graph
#
# Graph prints the module requirement graph (with replacements applied)
# in text form. Each line in the output has two space-separated fields: a module
# and one of its requirements. Each module is identified as a string of the form
# path@version, except for the main module, which has no @version suffix.
#
# ------------------------------------------------------------------------------
#
# usage: go mod init [module]
#
# Init initializes and writes a new go.mod to the current directory,
# in effect creating a new module rooted at the current directory.
# The file go.mod must not already exist.
# If possible, init will guess the module path from import comments
# (see 'go help importpath') or from version control configuration.
# To override this guess, supply the module path as an argument.
#
# ------------------------------------------------------------------------------
#
# usage: go mod tidy [-v]
#
# Tidy makes sure go.mod matches the source code in the module.
# It adds any missing modules necessary to build the current module's
# packages and dependencies, and it removes unused modules that
# don't provide any relevant packages. It also adds any missing entries
# to go.sum and removes any unnecessary ones.
#
# The -v flag causes tidy to print information about removed modules
# to standard error.
#
# ------------------------------------------------------------------------------
#
# usage: go mod vendor [-v]
#
# Vendor resets the main module's vendor directory to include all packages
# needed to build and test all the main module's packages.
# It does not include test code for vendored packages.
#
# The -v flag causes vendor to print the names of vendored
# modules and packages to standard error.
#
# ------------------------------------------------------------------------------
#
# usage: go mod verify
#
# Verify checks that the dependencies of the current module,
# which are stored in a local downloaded source cache, have not been
# modified since being downloaded. If all the modules are unmodified,
# verify prints "all modules verified." Otherwise it reports which
# modules have been changed and causes 'go mod' to exit with a
# non-zero status.
#
# ------------------------------------------------------------------------------
#
# usage: go mod why [-m] [-vendor] packages...
#
# Why shows a shortest path in the import graph from the main module to
# each of the listed packages. If the -m flag is given, why treats the
# arguments as a list of modules and finds a path to any package in each
# of the modules.
#
# By default, why queries the graph of packages matched by "go list all",
# which includes tests for reachable packages. The -vendor flag causes why
# to exclude tests of dependencies.
#
# The output is a sequence of stanzas, one for each package or module
# name on the command line, separated by blank lines. Each stanza begins
# with a comment line "# package" or "# module" giving the target
# package or module. Subsequent lines give a path through the import
# graph, one package per line. If the package or module is not
# referenced from the main module, the stanza will display a single
# parenthesized note indicating that fact.
#
# For example:
#
# 	$ go mod why golang.org/x/text/language golang.org/x/text/encoding
# 	# golang.org/x/text/language
# 	rsc.io/quote
# 	rsc.io/sampler
# 	golang.org/x/text/language
#
# 	# golang.org/x/text/encoding
# 	(main module does not need package golang.org/x/text/encoding)
# 	$
#
# ------------------------------------------------------------------------------
#
#
# usage: go run [build flags] [-exec xprog] package [arguments...]
#
# Run compiles and runs the named main Go package.
# Typically the package is specified as a list of .go source files,
# but it may also be an import path, file system path, or pattern
# matching a single known package, as in 'go run .' or 'go run my/cmd'.
#
# By default, 'go run' runs the compiled binary directly: 'a.out arguments...'.
# If the -exec flag is given, 'go run' invokes the binary using xprog:
# 	'xprog a.out arguments...'.
# If the -exec flag is not given, GOOS or GOARCH is different from the system
# default, and a program named go_$GOOS_$GOARCH_exec can be found
# on the current search path, 'go run' invokes the binary using that program,
# for example 'go_nacl_386_exec a.out arguments...'. This allows execution of
# cross-compiled programs when a simulator or other execution method is
# available.
#
# The exit status of Run is not the exit status of the compiled binary.
#
# For more about build flags, see 'go help build'.
# For more about specifying packages, see 'go help packages'.
#
# See also: go build.
#
# ------------------------------------------------------------------------------
#
# usage: go test [build/test flags] [packages] [build/test flags & test binary flags]
#
# 'Go test' automates testing the packages named by the import paths.
# It prints a summary of the test results in the format:
#
# 	ok   archive/tar   0.011s
# 	FAIL archive/zip   0.022s
# 	ok   compress/gzip 0.033s
# 	...
#
# followed by detailed output for each failed package.
#
# 'Go test' recompiles each package along with any files with names matching
# the file pattern "*_test.go".
# These additional files can contain test functions, benchmark functions, and
# example functions. See 'go help testfunc' for more.
# Each listed package causes the execution of a separate test binary.
# Files whose names begin with "_" (including "_test.go") or "." are ignored.
#
# Test files that declare a package with the suffix "_test" will be compiled as a
# separate package, and then linked and run with the main test binary.
#
# The go tool will ignore a directory named "testdata", making it available
# to hold ancillary data needed by the tests.
#
# As part of building a test binary, go test runs go vet on the package
# and its test source files to identify significant problems. If go vet
# finds any problems, go test reports those and does not run the test
# binary. Only a high-confidence subset of the default go vet checks are
# used. That subset is: 'atomic', 'bool', 'buildtags', 'nilfunc', and
# 'printf'. You can see the documentation for these and other vet tests
# via "go doc cmd/vet". To disable the running of go vet, use the
# -vet=off flag.
#
# All test output and summary lines are printed to the go command's
# standard output, even if the test printed them to its own standard
# error. (The go command's standard error is reserved for printing
# errors building the tests.)
#
# Go test runs in two different modes:
#
# The first, called local directory mode, occurs when go test is
# invoked with no package arguments (for example, 'go test' or 'go
# test -v'). In this mode, go test compiles the package sources and
# tests found in the current directory and then runs the resulting
# test binary. In this mode, caching (discussed below) is disabled.
# After the package test finishes, go test prints a summary line
# showing the test status ('ok' or 'FAIL'), package name, and elapsed
# time.
#
# The second, called package list mode, occurs when go test is invoked
# with explicit package arguments (for example 'go test math', 'go
# test ./...', and even 'go test .'). In this mode, go test compiles
# and tests each of the packages listed on the command line. If a
# package test passes, go test prints only the final 'ok' summary
# line. If a package test fails, go test prints the full test output.
# If invoked with the -bench or -v flag, go test prints the full
# output even for passing package tests, in order to display the
# requested benchmark results or verbose logging.
#
# In package list mode only, go test caches successful package test
# results to avoid unnecessary repeated running of tests. When the
# result of a test can be recovered from the cache, go test will
# redisplay the previous output instead of running the test binary
# again. When this happens, go test prints '(cached)' in place of the
# elapsed time in the summary line.
#
# The rule for a match in the cache is that the run involves the same
# test binary and the flags on the command line come entirely from a
# restricted set of 'cacheable' test flags, defined as -cpu, -list,
# -parallel, -run, -short, and -v. If a run of go test has any test
# or non-test flags outside this set, the result is not cached. To
# disable test caching, use any test flag or argument other than the
# cacheable flags. The idiomatic way to disable test caching explicitly
# is to use -count=1. Tests that open files within the package's source
# root (usually $GOPATH) or that consult environment variables only
# match future runs in which the files and environment variables are unchanged.
# A cached test result is treated as executing in no time at all,
# so a successful package test result will be cached and reused
# regardless of -timeout setting.
#
# In addition to the build flags, the flags handled by 'go test' itself are:
#
# 	-args
# 	    Pass the remainder of the command line (everything after -args)
# 	    to the test binary, uninterpreted and unchanged.
# 	    Because this flag consumes the remainder of the command line,
# 	    the package list (if present) must appear before this flag.
#
# 	-c
# 	    Compile the test binary to pkg.test but do not run it
# 	    (where pkg is the last element of the package's import path).
# 	    The file name can be changed with the -o flag.
#
# 	-exec xprog
# 	    Run the test binary using xprog. The behavior is the same as
# 	    in 'go run'. See 'go help run' for details.
#
# 	-i
# 	    Install packages that are dependencies of the test.
# 	    Do not run the test.
#
# 	-json
# 	    Convert test output to JSON suitable for automated processing.
# 	    See 'go doc test2json' for the encoding details.
#
# 	-o file
# 	    Compile the test binary to the named file.
# 	    The test still runs (unless -c or -i is specified).
#
# The test binary also accepts flags that control execution of the test; these
# flags are also accessible by 'go test'. See 'go help testflag' for details.
#
# For more about build flags, see 'go help build'.
# For more about specifying packages, see 'go help packages'.
#
# See also: go build, go vet.
#
# ------------------------------------------------------------------------------
#
# usage: go tool [-n] command [args...]
#
# Tool runs the go tool command identified by the arguments.
# With no arguments it prints the list of known tools.
#
# The -n flag causes tool to print the command that would be
# executed but not execute it.
#
# For more about each tool command, see 'go doc cmd/<command>'.
#
# ------------------------------------------------------------------------------
#
# usage: go version
#
# Version prints the Go version, as reported by runtime.Version.
#
# ------------------------------------------------------------------------------
#
# usage: go vet [-n] [-x] [build flags] [vet flags] [packages]
#
# Vet runs the Go vet command on the packages named by the import paths.
#
# For more about vet and its flags, see 'go doc cmd/vet'.
# For more about specifying packages, see 'go help packages'.
#
# The -n flag prints commands that would be executed.
# The -x flag prints commands as they are executed.
#
# The build flags supported by go vet are those that control package resolution
# and execution, such as -n, -x, -v, -tags, and -toolexec.
# For more about these flags, see 'go help build'.
#
# See also: go fmt, go fix.
#
# ------------------------------------------------------------------------------
#
# The 'go build' and 'go install' commands take a -buildmode argument which
# indicates which kind of object file is to be built. Currently supported values
# are:
#
# 	-buildmode=archive
# 		Build the listed non-main packages into .a files. Packages named
# 		main are ignored.
#
# 	-buildmode=c-archive
# 		Build the listed main package, plus all packages it imports,
# 		into a C archive file. The only callable symbols will be those
# 		functions exported using a cgo //export comment. Requires
# 		exactly one main package to be listed.
#
# 	-buildmode=c-shared
# 		Build the listed main package, plus all packages it imports,
# 		into a C shared library. The only callable symbols will
# 		be those functions exported using a cgo //export comment.
# 		Requires exactly one main package to be listed.
#
# 	-buildmode=default
# 		Listed main packages are built into executables and listed
# 		non-main packages are built into .a files (the default
# 		behavior).
#
# 	-buildmode=shared
# 		Combine all the listed non-main packages into a single shared
# 		library that will be used when building with the -linkshared
# 		option. Packages named main are ignored.
#
# 	-buildmode=exe
# 		Build the listed main packages and everything they import into
# 		executables. Packages not named main are ignored.
#
# 	-buildmode=pie
# 		Build the listed main packages and everything they import into
# 		position independent executables (PIE). Packages not named
# 		main are ignored.
#
# 	-buildmode=plugin
# 		Build the listed main packages, plus all packages that they
# 		import, into a Go plugin. Packages not named main are ignored.
#
# ------------------------------------------------------------------------------
#
# There are two different ways to call between Go and C/C++ code.
#
# The first is the cgo tool, which is part of the Go distribution. For
# information on how to use it see the cgo documentation (go doc cmd/cgo).
#
# The second is the SWIG program, which is a general tool for
# interfacing between languages. For information on SWIG see
# http://swig.org/. When running go build, any file with a .swig
# extension will be passed to SWIG. Any file with a .swigcxx extension
# will be passed to SWIG with the -c++ option.
#
# When either cgo or SWIG is used, go build will pass any .c, .m, .s,
# or .S files to the C compiler, and any .cc, .cpp, .cxx files to the C++
# compiler. The CC or CXX environment variables may be set to determine
# the C or C++ compiler, respectively, to use.
#
# ------------------------------------------------------------------------------
#
# The go command caches build outputs for reuse in future builds.
# The default location for cache data is a subdirectory named go-build
# in the standard user cache directory for the current operating system.
# Setting the GOCACHE environment variable overrides this default,
# and running 'go env GOCACHE' prints the current cache directory.
# You can set the variable to 'off' to disable the cache.
#
# The go command periodically deletes cached data that has not been
# used recently. Running 'go clean -cache' deletes all cached data.
#
# The build cache correctly accounts for changes to Go source files,
# compilers, compiler options, and so on: cleaning the cache explicitly
# should not be necessary in typical use. However, the build cache
# does not detect changes to C libraries imported with cgo.
# If you have made changes to the C libraries on your system, you
# will need to clean the cache explicitly or else use the -a build flag
# (see 'go help build') to force rebuilding of packages that
# depend on the updated C libraries.
#
# The go command also caches successful package test results.
# See 'go help test' for details. Running 'go clean -testcache' removes
# all cached test results (but not cached build results).
#
# The GODEBUG environment variable can enable printing of debugging
# information about the state of the cache:
#
# GODEBUG=gocacheverify=1 causes the go command to bypass the
# use of any cache entries and instead rebuild everything and check
# that the results match existing cache entries.
#
# GODEBUG=gocachehash=1 causes the go command to print the inputs
# for all of the content hashes it uses to construct cache lookup keys.
# The output is voluminous but can be useful for debugging the cache.
#
# GODEBUG=gocachetest=1 causes the go command to print details of its
# decisions about whether to reuse a cached test result.
#
# ------------------------------------------------------------------------------
#
# The go command, and the tools it invokes, examine a few different
# environment variables. For many of these, you can see the default
# value of on your system by running 'go env NAME', where NAME is the
# name of the variable.
#
# General-purpose environment variables:
#
# 	GCCGO
# 		The gccgo command to run for 'go build -compiler=gccgo'.
# 	GOARCH
# 		The architecture, or processor, for which to compile code.
# 		Examples are amd64, 386, arm, ppc64.
# 	GOBIN
# 		The directory where 'go install' will install a command.
# 	GOCACHE
# 		The directory where the go command will store cached
# 		information for reuse in future builds.
# 	GOOS
# 		The operating system for which to compile code.
# 		Examples are linux, darwin, windows, netbsd.
# 	GOPATH
# 		For more details see: 'go help gopath'.
# 	GORACE
# 		Options for the race detector.
# 		See https://golang.org/doc/articles/race_detector.html.
# 	GOROOT
# 		The root of the go tree.
# 	GOTMPDIR
# 		The directory where the go command will write
# 		temporary source files, packages, and binaries.
# 	GOTOOLDIR
# 		The directory where the go tools (compile, cover, doc, etc...)
# 		are installed. This is printed by go env, but setting the
# 		environment variable has no effect.
#
# Environment variables for use with cgo:
#
# 	CC
# 		The command to use to compile C code.
# 	CGO_ENABLED
# 		Whether the cgo command is supported. Either 0 or 1.
# 	CGO_CFLAGS
# 		Flags that cgo will pass to the compiler when compiling
# 		C code.
# 	CGO_CFLAGS_ALLOW
# 		A regular expression specifying additional flags to allow
# 		to appear in #cgo CFLAGS source code directives.
# 		Does not apply to the CGO_CFLAGS environment variable.
# 	CGO_CFLAGS_DISALLOW
# 		A regular expression specifying flags that must be disallowed
# 		from appearing in #cgo CFLAGS source code directives.
# 		Does not apply to the CGO_CFLAGS environment variable.
# 	CGO_CPPFLAGS, CGO_CPPFLAGS_ALLOW, CGO_CPPFLAGS_DISALLOW
# 		Like CGO_CFLAGS, CGO_CFLAGS_ALLOW, and CGO_CFLAGS_DISALLOW,
# 		but for the C preprocessor.
# 	CGO_CXXFLAGS, CGO_CXXFLAGS_ALLOW, CGO_CXXFLAGS_DISALLOW
# 		Like CGO_CFLAGS, CGO_CFLAGS_ALLOW, and CGO_CFLAGS_DISALLOW,
# 		but for the C++ compiler.
# 	CGO_FFLAGS, CGO_FFLAGS_ALLOW, CGO_FFLAGS_DISALLOW
# 		Like CGO_CFLAGS, CGO_CFLAGS_ALLOW, and CGO_CFLAGS_DISALLOW,
# 		but for the Fortran compiler.
# 	CGO_LDFLAGS, CGO_LDFLAGS_ALLOW, CGO_LDFLAGS_DISALLOW
# 		Like CGO_CFLAGS, CGO_CFLAGS_ALLOW, and CGO_CFLAGS_DISALLOW,
# 		but for the linker.
# 	CXX
# 		The command to use to compile C++ code.
# 	PKG_CONFIG
# 		Path to pkg-config tool.
#
# Architecture-specific environment variables:
#
# 	GOARM
# 		For GOARCH=arm, the ARM architecture for which to compile.
# 		Valid values are 5, 6, 7.
# 	GO386
# 		For GOARCH=386, the floating point instruction set.
# 		Valid values are 387, sse2.
# 	GOMIPS
# 		For GOARCH=mips{,le}, whether to use floating point instructions.
# 		Valid values are hardfloat (default), softfloat.
# 	GOMIPS64
# 		For GOARCH=mips64{,le}, whether to use floating point instructions.
# 		Valid values are hardfloat (default), softfloat.
#
# Special-purpose environment variables:
#
# 	GCCGOTOOLDIR
# 		If set, where to find gccgo tools, such as cgo.
# 		The default is based on how gccgo was configured.
# 	GOROOT_FINAL
# 		The root of the installed Go tree, when it is
# 		installed in a location other than where it is built.
# 		File names in stack traces are rewritten from GOROOT to
# 		GOROOT_FINAL.
# 	GO_EXTLINK_ENABLED
# 		Whether the linker should use external linking mode
# 		when using -linkmode=auto with code that uses cgo.
# 		Set to 0 to disable external linking mode, 1 to enable it.
# 	GIT_ALLOW_PROTOCOL
# 		Defined by Git. A colon-separated list of schemes that are allowed to be used
# 		with git fetch/clone. If set, any scheme not explicitly mentioned will be
# 		considered insecure by 'go get'.
#
# ------------------------------------------------------------------------------
#
# The go command examines the contents of a restricted set of files
# in each directory. It identifies which files to examine based on
# the extension of the file name. These extensions are:
#
# 	.go
# 		Go source files.
# 	.c, .h
# 		C source files.
# 		If the package uses cgo or SWIG, these will be compiled with the
# 		OS-native compiler (typically gcc); otherwise they will
# 		trigger an error.
# 	.cc, .cpp, .cxx, .hh, .hpp, .hxx
# 		C++ source files. Only useful with cgo or SWIG, and always
# 		compiled with the OS-native compiler.
# 	.m
# 		Objective-C source files. Only useful with cgo, and always
# 		compiled with the OS-native compiler.
# 	.s, .S
# 		Assembler source files.
# 		If the package uses cgo or SWIG, these will be assembled with the
# 		OS-native assembler (typically gcc (sic)); otherwise they
# 		will be assembled with the Go assembler.
# 	.swig, .swigcxx
# 		SWIG definition files.
# 	.syso
# 		System object files.
#
# Files of each of these types except .syso may contain build
# constraints, but the go command stops scanning for build constraints
# at the first item in the file that is not a blank line or //-style
# line comment. See the go/build package documentation for
# more details.
#
# Non-test Go source files can also include a //go:binary-only-package
# comment, indicating that the package sources are included
# for documentation only and must not be used to build the
# package binary. This enables distribution of Go packages in
# their compiled form alone. Even binary-only packages require
# accurate import blocks listing required dependencies, so that
# those dependencies can be supplied when linking the resulting
# command.
#
# ------------------------------------------------------------------------------
#
# The Go path is used to resolve import statements.
# It is implemented by and documented in the go/build package.
#
# The GOPATH environment variable lists places to look for Go code.
# On Unix, the value is a colon-separated string.
# On Windows, the value is a semicolon-separated string.
# On Plan 9, the value is a list.
#
# If the environment variable is unset, GOPATH defaults
# to a subdirectory named "go" in the user's home directory
# ($HOME/go on Unix, %USERPROFILE%\go on Windows),
# unless that directory holds a Go distribution.
# Run "go env GOPATH" to see the current GOPATH.
#
# See https://golang.org/wiki/SettingGOPATH to set a custom GOPATH.
#
# Each directory listed in GOPATH must have a prescribed structure:
#
# The src directory holds source code. The path below src
# determines the import path or executable name.
#
# The pkg directory holds installed package objects.
# As in the Go tree, each target operating system and
# architecture pair has its own subdirectory of pkg
# (pkg/GOOS_GOARCH).
#
# If DIR is a directory listed in the GOPATH, a package with
# source in DIR/src/foo/bar can be imported as "foo/bar" and
# has its compiled form installed to "DIR/pkg/GOOS_GOARCH/foo/bar.a".
#
# The bin directory holds compiled commands.
# Each command is named for its source directory, but only
# the final element, not the entire path. That is, the
# command with source in DIR/src/foo/quux is installed into
# DIR/bin/quux, not DIR/bin/foo/quux. The "foo/" prefix is stripped
# so that you can add DIR/bin to your PATH to get at the
# installed commands. If the GOBIN environment variable is
# set, commands are installed to the directory it names instead
# of DIR/bin. GOBIN must be an absolute path.
#
# Here's an example directory layout:
#
#     GOPATH=/home/user/go
#
#     /home/user/go/
#         src/
#             foo/
#                 bar/               (go code in package bar)
#                     x.go
#                 quux/              (go code in package main)
#                     y.go
#         bin/
#             quux                   (installed command)
#         pkg/
#             linux_amd64/
#                 foo/
#                     bar.a          (installed package object)
#
# Go searches each directory listed in GOPATH to find source code,
# but new packages are always downloaded into the first directory
# in the list.
#
# See https://golang.org/doc/code.html for an example.
#
# Internal Directories
#
# Code in or below a directory named "internal" is importable only
# by code in the directory tree rooted at the parent of "internal".
# Here's an extended version of the directory layout above:
#
#     /home/user/go/
#         src/
#             crash/
#                 bang/              (go code in package bang)
#                     b.go
#             foo/                   (go code in package foo)
#                 f.go
#                 bar/               (go code in package bar)
#                     x.go
#                 internal/
#                     baz/           (go code in package baz)
#                         z.go
#                 quux/              (go code in package main)
#                     y.go
#
#
# The code in z.go is imported as "foo/internal/baz", but that
# import statement can only appear in source files in the subtree
# rooted at foo. The source files foo/f.go, foo/bar/x.go, and
# foo/quux/y.go can all import "foo/internal/baz", but the source file
# crash/bang/b.go cannot.
#
# See https://golang.org/s/go14internal for details.
#
# Vendor Directories
#
# Go 1.6 includes support for using local copies of external dependencies
# to satisfy imports of those dependencies, often referred to as vendoring.
#
# Code below a directory named "vendor" is importable only
# by code in the directory tree rooted at the parent of "vendor",
# and only using an import path that omits the prefix up to and
# including the vendor element.
#
# Here's the example from the previous section,
# but with the "internal" directory renamed to "vendor"
# and a new foo/vendor/crash/bang directory added:
#
#     /home/user/go/
#         src/
#             crash/
#                 bang/              (go code in package bang)
#                     b.go
#             foo/                   (go code in package foo)
#                 f.go
#                 bar/               (go code in package bar)
#                     x.go
#                 vendor/
#                     crash/
#                         bang/      (go code in package bang)
#                             b.go
#                     baz/           (go code in package baz)
#                         z.go
#                 quux/              (go code in package main)
#                     y.go
#
# The same visibility rules apply as for internal, but the code
# in z.go is imported as "baz", not as "foo/vendor/baz".
#
# Code in vendor directories deeper in the source tree shadows
# code in higher directories. Within the subtree rooted at foo, an import
# of "crash/bang" resolves to "foo/vendor/crash/bang", not the
# top-level "crash/bang".
#
# Code in vendor directories is not subject to import path
# checking (see 'go help importpath').
#
# When 'go get' checks out or updates a git repository, it now also
# updates submodules.
#
# Vendor directories do not affect the placement of new repositories
# being checked out for the first time by 'go get': those are always
# placed in the main GOPATH, never in a vendor subtree.
#
# See https://golang.org/s/go15vendor for details.
#
# ------------------------------------------------------------------------------
#
# The 'go get' command changes behavior depending on whether the
# go command is running in module-aware mode or legacy GOPATH mode.
# This help text, accessible as 'go help gopath-get' even in module-aware mode,
# describes 'go get' as it operates in legacy GOPATH mode.
#
# Usage: get [-d] [-f] [-t] [-u] [-v] [-fix] [-insecure] [build flags] [packages]
#
# Get downloads the packages named by the import paths, along with their
# dependencies. It then installs the named packages, like 'go install'.
#
# The -d flag instructs get to stop after downloading the packages; that is,
# it instructs get not to install the packages.
#
# The -f flag, valid only when -u is set, forces get -u not to verify that
# each package has been checked out from the source control repository
# implied by its import path. This can be useful if the source is a local fork
# of the original.
#
# The -fix flag instructs get to run the fix tool on the downloaded packages
# before resolving dependencies or building the code.
#
# The -insecure flag permits fetching from repositories and resolving
# custom domains using insecure schemes such as HTTP. Use with caution.
#
# The -t flag instructs get to also download the packages required to build
# the tests for the specified packages.
#
# The -u flag instructs get to use the network to update the named packages
# and their dependencies. By default, get uses the network to check out
# missing packages but does not use it to look for updates to existing packages.
#
# The -v flag enables verbose progress and debug output.
#
# Get also accepts build flags to control the installation. See 'go help build'.
#
# When checking out a new package, get creates the target directory
# GOPATH/src/<import-path>. If the GOPATH contains multiple entries,
# get uses the first one. For more details see: 'go help gopath'.
#
# When checking out or updating a package, get looks for a branch or tag
# that matches the locally installed version of Go. The most important
# rule is that if the local installation is running version "go1", get
# searches for a branch or tag named "go1". If no such version exists
# it retrieves the default branch of the package.
#
# When go get checks out or updates a Git repository,
# it also updates any git submodules referenced by the repository.
#
# Get never checks out or updates code stored in vendor directories.
#
# For more about specifying packages, see 'go help packages'.
#
# For more about how 'go get' finds source code to
# download, see 'go help importpath'.
#
# This text describes the behavior of get when using GOPATH
# to manage source code and dependencies.
# If instead the go command is running in module-aware mode,
# the details of get's flags and effects change, as does 'go help get'.
# See 'go help modules' and 'go help module-get'.
#
# See also: go build, go install, go clean.
#
# ------------------------------------------------------------------------------
#
# An import path (see 'go help packages') denotes a package stored in the local
# file system. In general, an import path denotes either a standard package (such
# as "unicode/utf8") or a package found in one of the work spaces (For more
# details see: 'go help gopath').
#
# Relative import paths
#
# An import path beginning with ./ or ../ is called a relative path.
# The toolchain supports relative import paths as a shortcut in two ways.
#
# First, a relative path can be used as a shorthand on the command line.
# If you are working in the directory containing the code imported as
# "unicode" and want to run the tests for "unicode/utf8", you can type
# "go test ./utf8" instead of needing to specify the full path.
# Similarly, in the reverse situation, "go test .." will test "unicode" from
# the "unicode/utf8" directory. Relative patterns are also allowed, like
# "go test ./..." to test all subdirectories. See 'go help packages' for details
# on the pattern syntax.
#
# Second, if you are compiling a Go program not in a work space,
# you can use a relative path in an import statement in that program
# to refer to nearby code also not in a work space.
# This makes it easy to experiment with small multipackage programs
# outside of the usual work spaces, but such programs cannot be
# installed with "go install" (there is no work space in which to install them),
# so they are rebuilt from scratch each time they are built.
# To avoid ambiguity, Go programs cannot use relative import paths
# within a work space.
#
# Remote import paths
#
# Certain import paths also
# describe how to obtain the source code for the package using
# a revision control system.
#
# A few common code hosting sites have special syntax:
#
# 	Bitbucket (Git, Mercurial)
#
# 		import "bitbucket.org/user/project"
# 		import "bitbucket.org/user/project/sub/directory"
#
# 	GitHub (Git)
#
# 		import "github.com/user/project"
# 		import "github.com/user/project/sub/directory"
#
# 	Launchpad (Bazaar)
#
# 		import "launchpad.net/project"
# 		import "launchpad.net/project/series"
# 		import "launchpad.net/project/series/sub/directory"
#
# 		import "launchpad.net/~user/project/branch"
# 		import "launchpad.net/~user/project/branch/sub/directory"
#
# 	IBM DevOps Services (Git)
#
# 		import "hub.jazz.net/git/user/project"
# 		import "hub.jazz.net/git/user/project/sub/directory"
#
# For code hosted on other servers, import paths may either be qualified
# with the version control type, or the go tool can dynamically fetch
# the import path over https/http and discover where the code resides
# from a <meta> tag in the HTML.
#
# To declare the code location, an import path of the form
#
# 	repository.vcs/path
#
# specifies the given repository, with or without the .vcs suffix,
# using the named version control system, and then the path inside
# that repository. The supported version control systems are:
#
# 	Bazaar      .bzr
# 	Git         .git
# 	Mercurial   .hg
# 	Subversion  .svn
#
# For example,
#
# 	import "example.org/user/foo.hg"
#
# denotes the root directory of the Mercurial repository at
# example.org/user/foo or foo.hg, and
#
# 	import "example.org/repo.git/foo/bar"
#
# denotes the foo/bar directory of the Git repository at
# example.org/repo or repo.git.
#
# When a version control system supports multiple protocols,
# each is tried in turn when downloading. For example, a Git
# download tries https://, then git+ssh://.
#
# By default, downloads are restricted to known secure protocols
# (e.g. https, ssh). To override this setting for Git downloads, the
# GIT_ALLOW_PROTOCOL environment variable can be set (For more details see:
# 'go help environment').
#
# If the import path is not a known code hosting site and also lacks a
# version control qualifier, the go tool attempts to fetch the import
# over https/http and looks for a <meta> tag in the document's HTML
# <head>.
#
# The meta tag has the form:
#
# 	<meta name="go-import" content="import-prefix vcs repo-root">
#
# The import-prefix is the import path corresponding to the repository
# root. It must be a prefix or an exact match of the package being
# fetched with "go get". If it's not an exact match, another http
# request is made at the prefix to verify the <meta> tags match.
#
# The meta tag should appear as early in the file as possible.
# In particular, it should appear before any raw JavaScript or CSS,
# to avoid confusing the go command's restricted parser.
#
# The vcs is one of "git", "hg", "svn", etc,
#
# The repo-root is the root of the version control system
# containing a scheme and not containing a .vcs qualifier.
#
# For example,
#
# 	import "example.org/pkg/foo"
#
# will result in the following requests:
#
# 	https://example.org/pkg/foo?go-get=1 (preferred)
# 	http://example.org/pkg/foo?go-get=1  (fallback, only with -insecure)
#
# If that page contains the meta tag
#
# 	<meta name="go-import" content="example.org git https://code.org/r/p/exproj">
#
# the go tool will verify that https://example.org/?go-get=1 contains the
# same meta tag and then git clone https://code.org/r/p/exproj into
# GOPATH/src/example.org.
#
# New downloaded packages are written to the first directory listed in the GOPATH
# environment variable (For more details see: 'go help gopath').
#
# The go command attempts to download the version of the
# package appropriate for the Go release being used.
# Run 'go help get' for more.
#
# Import path checking
#
# When the custom import path feature described above redirects to a
# known code hosting site, each of the resulting packages has two possible
# import paths, using the custom domain or the known hosting site.
#
# A package statement is said to have an "import comment" if it is immediately
# followed (before the next newline) by a comment of one of these two forms:
#
# 	package math // import "path"
# 	package math /* import "path" */
#
# The go command will refuse to install a package with an import comment
# unless it is being referred to by that import path. In this way, import comments
# let package authors make sure the custom import path is used and not a
# direct path to the underlying code hosting site.
#
# Import path checking is disabled for code found within vendor trees.
# This makes it possible to copy code into alternate locations in vendor trees
# without needing to update import comments.
#
# See https://golang.org/s/go14customimport for details.
#
# ------------------------------------------------------------------------------
#
# A module is a collection of related Go packages.
# Modules are the unit of source code interchange and versioning.
# The go command has direct support for working with modules,
# including recording and resolving dependencies on other modules.
# Modules replace the old GOPATH-based approach to specifying
# which source files are used in a given build.
#
# Experimental module support
#
# Go 1.11 includes experimental support for Go modules,
# including a new module-aware 'go get' command.
# We intend to keep revising this support, while preserving compatibility,
# until it can be declared official (no longer experimental),
# and then at a later point we may remove support for work
# in GOPATH and the old 'go get' command.
#
# The quickest way to take advantage of the new Go 1.11 module support
# is to check out your repository into a directory outside GOPATH/src,
# create a go.mod file (described in the next section) there, and run
# go commands from within that file tree.
#
# For more fine-grained control, the module support in Go 1.11 respects
# a temporary environment variable, GO111MODULE, which can be set to one
# of three string values: off, on, or auto (the default).
# If GO111MODULE=off, then the go command never uses the
# new module support. Instead it looks in vendor directories and GOPATH
# to find dependencies; we now refer to this as "GOPATH mode."
# If GO111MODULE=on, then the go command requires the use of modules,
# never consulting GOPATH. We refer to this as the command being
# module-aware or running in "module-aware mode".
# If GO111MODULE=auto or is unset, then the go command enables or
# disables module support based on the current directory.
# Module support is enabled only when the current directory is outside
# GOPATH/src and itself contains a go.mod file or is below a directory
# containing a go.mod file.
#
# Defining a module
#
# A module is defined by a tree of Go source files with a go.mod file
# in the tree's root directory. The directory containing the go.mod file
# is called the module root. Typically the module root will also correspond
# to a source code repository root (but in general it need not).
# The module is the set of all Go packages in the module root and its
# subdirectories, but excluding subtrees with their own go.mod files.
#
# The "module path" is the import path prefix corresponding to the module root.
# The go.mod file defines the module path and lists the specific versions
# of other modules that should be used when resolving imports during a build,
# by giving their module paths and versions.
#
# For example, this go.mod declares that the directory containing it is the root
# of the module with path example.com/m, and it also declares that the module
# depends on specific versions of golang.org/x/text and gopkg.in/yaml.v2:
#
# 	module example.com/m
#	
# 	require (
# 		golang.org/x/text v0.3.0
# 		gopkg.in/yaml.v2 v2.1.0
# 	)
#
# The go.mod file can also specify replacements and excluded versions
# that only apply when building the module directly; they are ignored
# when the module is incorporated into a larger build.
# For more about the go.mod file, see https://research.swtch.com/vgo-module.
#
# To start a new module, simply create a go.mod file in the root of the
# module's directory tree, containing only a module statement.
# The 'go mod' command can be used to do this:
#
# 	go mod -init -module example.com/m
#
# In a project already using an existing dependency management tool like
# godep, glide, or dep, 'go mod -init' will also add require statements
# matching the existing configuration.
#
# Once the go.mod file exists, no additional steps are required:
# go commands like 'go build', 'go test', or even 'go list' will automatically
# add new dependencies as needed to satisfy imports.
#
# The main module and the build list
#
# The "main module" is the module containing the directory where the go command
# is run. The go command finds the module root by looking for a go.mod in the
# current directory, or else the current directory's parent directory,
# or else the parent's parent directory, and so on.
#
# The main module's go.mod file defines the precise set of packages available
# for use by the go command, through require, replace, and exclude statements.
# Dependency modules, found by following require statements, also contribute
# to the definition of that set of packages, but only through their go.mod
# files' require statements: any replace and exclude statements in dependency
# modules are ignored. The replace and exclude statements therefore allow the
# main module complete control over its own build, without also being subject
# to complete control by dependencies.
#
# The set of modules providing packages to builds is called the "build list".
# The build list initially contains only the main module. Then the go command
# adds to the list the exact module versions required by modules already
# on the list, recursively, until there is nothing left to add to the list.
# If multiple versions of a particular module are added to the list,
# then at the end only the latest version (according to semantic version
# ordering) is kept for use in the build.
#
# The 'go list' command provides information about the main module
# and the build list. For example:
#
# 	go list -m              # print path of main module
# 	go list -m -f={{.Dir}}  # print root directory of main module
# 	go list -m all          # print build list
#
# Maintaining module requirements
#
# The go.mod file is meant to be readable and editable by both
# programmers and tools. The go command itself automatically updates the go.mod file
# to maintain a standard formatting and the accuracy of require statements.
#
# Any go command that finds an unfamiliar import will look up the module
# containing that import and add the latest version of that module
# to go.mod automatically. In most cases, therefore, it suffices to
# add an import to source code and run 'go build', 'go test', or even 'go list':
# as part of analyzing the package, the go command will discover
# and resolve the import and update the go.mod file.
#
# Any go command can determine that a module requirement is
# missing and must be added, even when considering only a single
# package from the module. On the other hand, determining that a module requirement
# is no longer necessary and can be deleted requires a full view of
# all packages in the module, across all possible build configurations
# (architectures, operating systems, build tags, and so on).
# The 'go mod -sync' command builds that view and then
# adds any missing module requirements and removes unnecessary ones.
#
# As part of maintaining the require statements in go.mod, the go command
# tracks which ones provide packages imported directly by the current module
# and which ones provide packages only used indirectly by other module
# dependencies. Requirements needed only for indirect uses are marked with a
# "// indirect" comment in the go.mod file. Indirect requirements are
# automatically removed from the go.mod file once they are implied by other
# direct requirements. Indirect requirements only arise when using modules
# that fail to state some of their own dependencies or when explicitly
# upgrading a module's dependencies ahead of its own stated requirements.
#
# Because of this automatic maintenance, the information in go.mod is an
# up-to-date, readable description of the build.
#
# The 'go get' command updates go.mod to change the module versions used in a
# build. An upgrade of one module may imply upgrading others, and similarly a
# downgrade of one module may imply downgrading others. The 'go get' command
# makes these implied changes as well. If go.mod is edited directly, commands
# like 'go build' or 'go list' will assume that an upgrade is intended and
# automatically make any implied upgrades and update go.mod to reflect them.
#
# The 'go mod' command provides other functionality for use in maintaining
# and understanding modules and go.mod files. See 'go help mod'.
#
# Pseudo-versions
#
# The go.mod file and the go command more generally use semantic versions as
# the standard form for describing module versions, so that versions can be
# compared to determine which should be considered earlier or later than another.
# A module version like v1.2.3 is introduced by tagging a revision in the
# underlying source repository. Untagged revisions can be referred to
# using a "pseudo-version" of the form v0.0.0-yyyymmddhhmmss-abcdefabcdef,
# where the time is the commit time in UTC and the final suffix is the prefix
# of the commit hash. The time portion ensures that two pseudo-versions can
# be compared to determine which happened later, the commit hash identifes
# the underlying commit, and the v0.0.0- prefix identifies the pseudo-version
# as a pre-release before version v0.0.0, so that the go command prefers any
# tagged release over any pseudo-version.
#
# Pseudo-versions never need to be typed by hand: the go command will accept
# the plain commit hash and translate it into a pseudo-version (or a tagged
# version if available) automatically. This conversion is an example of a
# module query.
#
# Module queries
#
# The go command accepts a "module query" in place of a module version
# both on the command line and in the main module's go.mod file.
# (After evaluating a query found in the main module's go.mod file,
# the go command updates the file to replace the query with its result.)
#
# A fully-specified semantic version, such as "v1.2.3",
# evaluates to that specific version.
#
# A semantic version prefix, such as "v1" or "v1.2",
# evaluates to the latest available tagged version with that prefix.
#
# A semantic version comparison, such as "<v1.2.3" or ">=v1.5.6",
# evaluates to the available tagged version nearest to the comparison target
# (the latest version for < and <=, the earliest version for > and >=).
#
# The string "latest" matches the latest available tagged version,
# or else the underlying source repository's latest untagged revision.
#
# A revision identifier for the underlying source repository,
# such as a commit hash prefix, revision tag, or branch name,
# selects that specific code revision. If the revision is
# also tagged with a semantic version, the query evaluates to
# that semantic version. Otherwise the query evaluates to a
# pseudo-version for the commit.
#
# All queries prefer release versions to pre-release versions.
# For example, "<v1.2.3" will prefer to return "v1.2.2"
# instead of "v1.2.3-pre1", even though "v1.2.3-pre1" is nearer
# to the comparison target.
#
# Module versions disallowed by exclude statements in the
# main module's go.mod are considered unavailable and cannot
# be returned by queries.
#
# For example, these commands are all valid:
#
# 	go get github.com/gorilla/mux@latest    # same (@latest is default for 'go get')
# 	go get github.com/gorilla/mux@v1.6.2    # records v1.6.2
# 	go get github.com/gorilla/mux@e3702bed2 # records v1.6.2
# 	go get github.com/gorilla/mux@c856192   # records v0.0.0-20180517173623-c85619274f5d
# 	go get github.com/gorilla/mux@master    # records current meaning of master
#
#
# Module compatibility and semantic versioning
#
# The go command requires that modules use semantic versions and expects that
# the versions accurately describe compatibility: it assumes that v1.5.4 is a
# backwards-compatible replacement for v1.5.3, v1.4.0, and even v1.0.0.
# More generally the go command expects that packages follow the
# "import compatibility rule", which says:
#
# "If an old package and a new package have the same import path, 
# the new package must be backwards compatible with the old package."
#
# Because the go command assumes the import compatibility rule,
# a module definition can only set the minimum required version of one 
# of its dependencies: it cannot set a maximum or exclude selected versions.
# Still, the import compatibility rule is not a guarantee: it may be that
# v1.5.4 is buggy and not a backwards-compatible replacement for v1.5.3.
# Because of this, the go command never updates from an older version
# to a newer version of a module unasked.
#
# In semantic versioning, changing the major version number indicates a lack
# of backwards compatibility with earlier versions. To preserve import
# compatibility, the go command requires that modules with major version v2
# or later use a module path with that major version as the final element.
# For example, version v2.0.0 of example.com/m must instead use module path
# example.com/m/v2, and packages in that module would use that path as
# their import path prefix, as in example.com/m/v2/sub/pkg. Including the
# major version number in the module path and import paths in this way is
# called "semantic import versioning". Pseudo-versions for modules with major
# version v2 and later begin with that major version instead of v0, as in
# v2.0.0-20180326061214-4fc5987536ef.
#
# The go command treats modules with different module paths as unrelated:
# it makes no connection between example.com/m and example.com/m/v2.
# Modules with different major versions can be used together in a build
# and are kept separate by the fact that their packages use different
# import paths.
#
# In semantic versioning, major version v0 is for initial development,
# indicating no expectations of stability or backwards compatibility.
# Major version v0 does not appear in the module path, because those
# versions are preparation for v1.0.0, and v1 does not appear in the
# module path either.
#
# As a special case, for historical reasons, module paths beginning with
# gopkg.in/ continue to use the conventions established on that system:
# the major version is always present, and it is preceded by a dot 
# instead of a slash: gopkg.in/yaml.v1 and gopkg.in/yaml.v2, not
# gopkg.in/yaml and gopkg.in/yaml/v2.
#
# See https://research.swtch.com/vgo-import and https://semver.org/
# for more information.
#
# Module verification
#
# The go command maintains, in the main module's root directory alongside
# go.mod, a file named go.sum containing the expected cryptographic checksums
# of the content of specific module versions. Each time a dependency is
# used, its checksum is added to go.sum if missing or else required to match
# the existing entry in go.sum.
#
# The go command maintains a cache of downloaded packages and computes
# and records the cryptographic checksum of each package at download time.
# In normal operation, the go command checks these pre-computed checksums
# against the main module's go.sum file, instead of recomputing them on
# each command invocation. The 'go mod -verify' command checks that
# the cached copies of module downloads still match both their recorded
# checksums and the entries in go.sum.
#
# Modules and vendoring
#
# When using modules, the go command completely ignores vendor directories.
#
# By default, the go command satisfies dependencies by downloading modules
# from their sources and using those downloaded copies (after verification,
# as described in the previous section). To allow interoperation with older
# versions of Go, or to ensure that all files used for a build are stored
# together in a single file tree, 'go mod -vendor' creates a directory named
# vendor in the root directory of the main module and stores there all the
# packages from dependency modules that are needed to support builds and
# tests of packages in the main module.
#
# To build using the main module's top-level vendor directory to satisfy
# dependencies (disabling use of the usual network sources and local
# caches), use 'go build -getmode=vendor'. Note that only the main module's
# top-level vendor directory is used; vendor directories in other locations
# are still ignored.
#
# ------------------------------------------------------------------------------
#
# The 'go get' command changes behavior depending on whether the
# go command is running in module-aware mode or legacy GOPATH mode.
# This help text, accessible as 'go help module-get' even in legacy GOPATH mode,
# describes 'go get' as it operates in module-aware mode.
#
# Usage: get [-d] [-m] [-u] [-v] [-insecure] [build flags] [packages]
#
# Get resolves and adds dependencies to the current development module
# and then builds and installs them.
#
# The first step is to resolve which dependencies to add. 
#
# For each named package or package pattern, get must decide which version of
# the corresponding module to use. By default, get chooses the latest tagged
# release version, such as v0.4.5 or v1.2.3. If there are no tagged release
# versions, get chooses the latest tagged prerelease version, such as
# v0.0.1-pre1. If there are no tagged versions at all, get chooses the latest
# known commit.
#
# This default version selection can be overridden by adding an @version
# suffix to the package argument, as in 'go get golang.org/x/text@v0.3.0'.
# For modules stored in source control repositories, the version suffix can
# also be a commit hash, branch identifier, or other syntax known to the
# source control system, as in 'go get golang.org/x/text@master'.
# The version suffix @latest explicitly requests the default behavior
# described above.
#
# If a module under consideration is already a dependency of the current
# development module, then get will update the required version.
# Specifying a version earlier than the current required version is valid and
# downgrades the dependency. The version suffix @none indicates that the
# dependency should be removed entirely.
#
# Although get defaults to using the latest version of the module containing
# a named package, it does not use the latest version of that module's
# dependencies. Instead it prefers to use the specific dependency versions
# requested by that module. For example, if the latest A requires module
# B v1.2.3, while B v1.2.4 and v1.3.1 are also available, then 'go get A'
# will use the latest A but then use B v1.2.3, as requested by A. (If there
# are competing requirements for a particular module, then 'go get' resolves
# those requirements by taking the maximum requested version.)
#
# The -u flag instructs get to update dependencies to use newer minor or
# patch releases when available. Continuing the previous example,
# 'go get -u A' will use the latest A with B v1.3.1 (not B v1.2.3).
#
# The -u=patch flag (not -u patch) instructs get to update dependencies
# to use newer patch releases when available. Continuing the previous example,
# 'go get -u=patch A' will use the latest A with B v1.2.4 (not B v1.2.3).
#
# In general, adding a new dependency may require upgrading
# existing dependencies to keep a working build, and 'go get' does
# this automatically. Similarly, downgrading one dependency may
# require downgrading other dependenceis, and 'go get' does
# this automatically as well.
#
# The -m flag instructs get to stop here, after resolving, upgrading,
# and downgrading modules and updating go.mod. When using -m,
# each specified package path must be a module path as well,
# not the import path of a package below the module root.
#
# The -insecure flag permits fetching from repositories and resolving
# custom domains using insecure schemes such as HTTP. Use with caution.
#
# The second step is to download (if needed), build, and install
# the named packages.
#
# If an argument names a module but not a package (because there is no
# Go source code in the module's root directory), then the install step
# is skipped for that argument, instead of causing a build failure.
# For example 'go get golang.org/x/perf' succeeds even though there
# is no code corresponding to that import path.
#
# Note that package patterns are allowed and are expanded after resolving
# the module versions. For example, 'go get golang.org/x/perf/cmd/...'
# adds the latest golang.org/x/perf and then installs the commands in that
# latest version.
#
# The -d flag instructs get to download the source code needed to build
# the named packages, including downloading necessary dependencies,
# but not to build and install them.
#
# With no package arguments, 'go get' applies to the main module,
# and to the Go package in the current directory, if any. In particular,
# 'go get -u' and 'go get -u=patch' update all the dependencies of the
# main module. With no package arguments and also without -u,
# 'go get' is not much more than 'go install', and 'go get -d' not much
# more than 'go list'.
#
# For more about modules, see 'go help modules'.
#
# For more about specifying packages, see 'go help packages'.
#
# This text describes the behavior of get using modules to manage source
# code and dependencies. If instead the go command is running in GOPATH
# mode, the details of get's flags and effects change, as does 'go help get'.
# See 'go help modules' and 'go help gopath-get'.
#
# See also: go build, go install, go clean, go mod.
#
# ------------------------------------------------------------------------------
#
# Many commands apply to a set of packages:
#
# 	go action [packages]
#
# Usually, [packages] is a list of import paths.
#
# An import path that is a rooted path or that begins with
# a . or .. element is interpreted as a file system path and
# denotes the package in that directory.
#
# Otherwise, the import path P denotes the package found in
# the directory DIR/src/P for some DIR listed in the GOPATH
# environment variable (For more details see: 'go help gopath').
#
# If no import paths are given, the action applies to the
# package in the current directory.
#
# There are four reserved names for paths that should not be used
# for packages to be built with the go tool:
#
# - "main" denotes the top-level package in a stand-alone executable.
#
# - "all" expands to all packages found in all the GOPATH
# trees. For example, 'go list all' lists all the packages on the local
# system. When using modules, "all" expands to all packages in
# the main module and their dependencies, including dependencies
# needed by tests of any of those.
#
# - "std" is like all but expands to just the packages in the standard
# Go library.
#
# - "cmd" expands to the Go repository's commands and their
# internal libraries.
#
# Import paths beginning with "cmd/" only match source code in
# the Go repository.
#
# An import path is a pattern if it includes one or more "..." wildcards,
# each of which can match any string, including the empty string and
# strings containing slashes. Such a pattern expands to all package
# directories found in the GOPATH trees with names matching the
# patterns.
#
# To make common patterns more convenient, there are two special cases.
# First, /... at the end of the pattern can match an empty string,
# so that net/... matches both net and packages in its subdirectories, like net/http.
# Second, any slash-separated pattern element containing a wildcard never
# participates in a match of the "vendor" element in the path of a vendored
# package, so that ./... does not match packages in subdirectories of
# ./vendor or ./mycode/vendor, but ./vendor/... and ./mycode/vendor/... do.
# Note, however, that a directory named vendor that itself contains code
# is not a vendored package: cmd/vendor would be a command named vendor,
# and the pattern cmd/... matches it.
# See golang.org/s/go15vendor for more about vendoring.
#
# An import path can also name a package to be downloaded from
# a remote repository. Run 'go help importpath' for details.
#
# Every package in a program must have a unique import path.
# By convention, this is arranged by starting each path with a
# unique prefix that belongs to you. For example, paths used
# internally at Google all begin with 'google', and paths
# denoting remote repositories begin with the path to the code,
# such as 'github.com/user/repo'.
#
# Packages in a program need not have unique package names,
# but there are two reserved package names with special meaning.
# The name main indicates a command, not a library.
# Commands are built into binaries and cannot be imported.
# The name documentation indicates documentation for
# a non-Go program in the directory. Files in package documentation
# are ignored by the go command.
#
# As a special case, if the package list is a list of .go files from a
# single directory, the command is applied to a single synthesized
# package made up of exactly those files, ignoring any build constraints
# in those files and ignoring any other files in the directory.
#
# Directory and file names that begin with "." or "_" are ignored
# by the go tool, as are directories named "testdata".
#
# ------------------------------------------------------------------------------
#
# The 'go test' command takes both flags that apply to 'go test' itself
# and flags that apply to the resulting test binary.
#
# Several of the flags control profiling and write an execution profile
# suitable for "go tool pprof"; run "go tool pprof -h" for more
# information. The --alloc_space, --alloc_objects, and --show_bytes
# options of pprof control how the information is presented.
#
# The following flags are recognized by the 'go test' command and
# control the execution of any test:
#
# 	-bench regexp
# 	    Run only those benchmarks matching a regular expression.
# 	    By default, no benchmarks are run.
# 	    To run all benchmarks, use '-bench .' or '-bench=.'.
# 	    The regular expression is split by unbracketed slash (/)
# 	    characters into a sequence of regular expressions, and each
# 	    part of a benchmark's identifier must match the corresponding
# 	    element in the sequence, if any. Possible parents of matches
# 	    are run with b.N=1 to identify sub-benchmarks. For example,
# 	    given -bench=X/Y, top-level benchmarks matching X are run
# 	    with b.N=1 to find any sub-benchmarks matching Y, which are
# 	    then run in full.
#
# 	-benchtime t
# 	    Run enough iterations of each benchmark to take t, specified
# 	    as a time.Duration (for example, -benchtime 1h30s).
# 	    The default is 1 second (1s).
#
# 	-count n
# 	    Run each test and benchmark n times (default 1).
# 	    If -cpu is set, run n times for each GOMAXPROCS value.
# 	    Examples are always run once.
#
# 	-cover
# 	    Enable coverage analysis.
# 	    Note that because coverage works by annotating the source
# 	    code before compilation, compilation and test failures with
# 	    coverage enabled may report line numbers that don't correspond
# 	    to the original sources.
#
# 	-covermode set,count,atomic
# 	    Set the mode for coverage analysis for the package[s]
# 	    being tested. The default is "set" unless -race is enabled,
# 	    in which case it is "atomic".
# 	    The values:
# 		set: bool: does this statement run?
# 		count: int: how many times does this statement run?
# 		atomic: int: count, but correct in multithreaded tests;
# 			significantly more expensive.
# 	    Sets -cover.
#
# 	-coverpkg pattern1,pattern2,pattern3
# 	    Apply coverage analysis in each test to packages matching the patterns.
# 	    The default is for each test to analyze only the package being tested.
# 	    See 'go help packages' for a description of package patterns.
# 	    Sets -cover.
#
# 	-cpu 1,2,4
# 	    Specify a list of GOMAXPROCS values for which the tests or
# 	    benchmarks should be executed. The default is the current value
# 	    of GOMAXPROCS.
#
# 	-failfast
# 	    Do not start new tests after the first test failure.
#
# 	-list regexp
# 	    List tests, benchmarks, or examples matching the regular expression.
# 	    No tests, benchmarks or examples will be run. This will only
# 	    list top-level tests. No subtest or subbenchmarks will be shown.
#
# 	-parallel n
# 	    Allow parallel execution of test functions that call t.Parallel.
# 	    The value of this flag is the maximum number of tests to run
# 	    simultaneously; by default, it is set to the value of GOMAXPROCS.
# 	    Note that -parallel only applies within a single test binary.
# 	    The 'go test' command may run tests for different packages
# 	    in parallel as well, according to the setting of the -p flag
# 	    (see 'go help build').
#
# 	-run regexp
# 	    Run only those tests and examples matching the regular expression.
# 	    For tests, the regular expression is split by unbracketed slash (/)
# 	    characters into a sequence of regular expressions, and each part
# 	    of a test's identifier must match the corresponding element in
# 	    the sequence, if any. Note that possible parents of matches are
# 	    run too, so that -run=X/Y matches and runs and reports the result
# 	    of all tests matching X, even those without sub-tests matching Y,
# 	    because it must run them to look for those sub-tests.
#
# 	-short
# 	    Tell long-running tests to shorten their run time.
# 	    It is off by default but set during all.bash so that installing
# 	    the Go tree can run a sanity check but not spend time running
# 	    exhaustive tests.
#
# 	-timeout d
# 	    If a test binary runs longer than duration d, panic.
# 	    If d is 0, the timeout is disabled.
# 	    The default is 10 minutes (10m).
#
# 	-v
# 	    Verbose output: log all tests as they are run. Also print all
# 	    text from Log and Logf calls even if the test succeeds.
#
# 	-vet list
# 	    Configure the invocation of "go vet" during "go test"
# 	    to use the comma-separated list of vet checks.
# 	    If list is empty, "go test" runs "go vet" with a curated list of
# 	    checks believed to be always worth addressing.
# 	    If list is "off", "go test" does not run "go vet" at all.
#
# The following flags are also recognized by 'go test' and can be used to
# profile the tests during execution:
#
# 	-benchmem
# 	    Print memory allocation statistics for benchmarks.
#
# 	-blockprofile block.out
# 	    Write a goroutine blocking profile to the specified file
# 	    when all tests are complete.
# 	    Writes test binary as -c would.
#
# 	-blockprofilerate n
# 	    Control the detail provided in goroutine blocking profiles by
# 	    calling runtime.SetBlockProfileRate with n.
# 	    See 'go doc runtime.SetBlockProfileRate'.
# 	    The profiler aims to sample, on average, one blocking event every
# 	    n nanoseconds the program spends blocked. By default,
# 	    if -test.blockprofile is set without this flag, all blocking events
# 	    are recorded, equivalent to -test.blockprofilerate=1.
#
# 	-coverprofile cover.out
# 	    Write a coverage profile to the file after all tests have passed.
# 	    Sets -cover.
#
# 	-cpuprofile cpu.out
# 	    Write a CPU profile to the specified file before exiting.
# 	    Writes test binary as -c would.
#
# 	-memprofile mem.out
# 	    Write an allocation profile to the file after all tests have passed.
# 	    Writes test binary as -c would.
#
# 	-memprofilerate n
# 	    Enable more precise (and expensive) memory allocation profiles by
# 	    setting runtime.MemProfileRate. See 'go doc runtime.MemProfileRate'.
# 	    To profile all memory allocations, use -test.memprofilerate=1.
#
# 	-mutexprofile mutex.out
# 	    Write a mutex contention profile to the specified file
# 	    when all tests are complete.
# 	    Writes test binary as -c would.
#
# 	-mutexprofilefraction n
# 	    Sample 1 in n stack traces of goroutines holding a
# 	    contended mutex.
#
# 	-outputdir directory
# 	    Place output files from profiling in the specified directory,
# 	    by default the directory in which "go test" is running.
#
# 	-trace trace.out
# 	    Write an execution trace to the specified file before exiting.
#
# Each of these flags is also recognized with an optional 'test.' prefix,
# as in -test.v. When invoking the generated test binary (the result of
# 'go test -c') directly, however, the prefix is mandatory.
#
# The 'go test' command rewrites or removes recognized flags,
# as appropriate, both before and after the optional package list,
# before invoking the test binary.
#
# For instance, the command
#
# 	go test -v -myflag testdata -cpuprofile=prof.out -x
#
# will compile the test binary and then run it as
#
# 	pkg.test -test.v -myflag testdata -test.cpuprofile=prof.out
#
# (The -x flag is removed because it applies only to the go command's
# execution, not to the test itself.)
#
# The test flags that generate profiles (other than for coverage) also
# leave the test binary in pkg.test for use when analyzing the profiles.
#
# When 'go test' runs a test binary, it does so from within the
# corresponding package's source code directory. Depending on the test,
# it may be necessary to do the same when invoking a generated test
# binary directly.
#
# The command-line package list, if present, must appear before any
# flag not known to the go test command. Continuing the example above,
# the package list would have to appear before -myflag, but could appear
# on either side of -v.
#
# When 'go test' runs in package list mode, 'go test' caches successful
# package test results to avoid unnecessary repeated running of tests. To
# disable test caching, use any test flag or argument other than the
# cacheable flags. The idiomatic way to disable test caching explicitly
# is to use -count=1.
#
# To keep an argument for a test binary from being interpreted as a
# known flag or a package name, use -args (see 'go help test') which
# passes the remainder of the command line through to the test binary
# uninterpreted and unaltered.
#
# For instance, the command
#
# 	go test -v -args -x -v
#
# will compile the test binary and then run it as
#
# 	pkg.test -test.v -x -v
#
# Similarly,
#
# 	go test -args math
#
# will compile the test binary and then run it as
#
# 	pkg.test math
#
# In the first example, the -x and the second -v are passed through to the
# test binary unchanged and with no effect on the go command itself.
# In the second example, the argument math is passed through to the test
# binary, instead of being interpreted as the package list.
#
# ------------------------------------------------------------------------------
#
# The 'go test' command expects to find test, benchmark, and example functions
# in the "*_test.go" files corresponding to the package under test.
#
# A test function is one named TestXxx (where Xxx does not start with a
# lower case letter) and should have the signature,
#
# 	func TestXxx(t *testing.T) { ... }
#
# A benchmark function is one named BenchmarkXxx and should have the signature,
#
# 	func BenchmarkXxx(b *testing.B) { ... }
#
# An example function is similar to a test function but, instead of using
# *testing.T to report success or failure, prints output to os.Stdout.
# If the last comment in the function starts with "Output:" then the output
# is compared exactly against the comment (see examples below). If the last
# comment begins with "Unordered output:" then the output is compared to the
# comment, however the order of the lines is ignored. An example with no such
# comment is compiled but not executed. An example with no text after
# "Output:" is compiled, executed, and expected to produce no output.
#
# Godoc displays the body of ExampleXxx to demonstrate the use
# of the function, constant, or variable Xxx. An example of a method M with
# receiver type T or *T is named ExampleT_M. There may be multiple examples
# for a given function, constant, or variable, distinguished by a trailing _xxx,
# where xxx is a suffix not beginning with an upper case letter.
#
# Here is an example of an example:
#
# 	func ExamplePrintln() {
# 		Println("The output of\nthis example.")
# 		// Output: The output of
# 		// this example.
# 	}
#
# Here is another example where the ordering of the output is ignored:
#
# 	func ExamplePerm() {
# 		for _, value := range Perm(4) {
# 			fmt.Println(value)
# 		}
#
# 		// Unordered output: 4
# 		// 2
# 		// 1
# 		// 3
# 		// 0
# 	}
#
# The entire test file is presented as the example when it contains a single
# example function, at least one other function, type, variable, or constant
# declaration, and no test or benchmark functions.
#
# See the documentation of the testing package for more information.
#
# ------------------------------------------------------------------------------

local context curcontext=$curcontext state line ret=1
declare -A opt_args

_go() {
  local -a commands

  commands=(
  'build:compile packages and dependencies'
  'clean:remove object files'
  'doc:show documentation for package or symbol'
  'env:print Go environment information'
  'fix:run go tool fix on packages'
  'fmt:run gofmt on package sources'
  'generate:generate Go files by processing source'
  'get:download and install packages and dependencies'
  'install:compile and install packages and dependencies'
  'list:list packages'
  'mod:module maintenance'
  'run:compile and run Go program'
  'test:test packages'
  'tool:run specified go tool'
  'version:print Go version'
  'vet:run go tool vet on packages'
  'help:get more information about a command'
  )

  case "$service" in
    vgo)
      commands[8]='get:download and install versioned modules and dependencies'
      commands+="vendor:vendor dependencies of current module"
      commands+='verify:verify downloaded modules against expected hashes'
      ;;
  esac

  _go_files() {
    _files -g "*.go(-.)"
  }

  __go_packages() {
    local -a gopaths
    gopaths=("${(s/:/)$(go env GOPATH)}")
    gopaths+=("$(go env GOROOT)")
    for p in $gopaths; do
      _alternative ':go packages:_path_files -W "$p/src" -/'
    done
    _alternative '*:go file:_go_files'
  }

  __build_flags() {
    _arguments \
      '-a[force rebuilding of packages that are already up-to-date]' \
      '-n[print the commands but do not run them]' \
      '-p[number of builds that can be run in parallel]:number' \
      '-race[enable data race detection]' \
      '-v[print the names of packages as they are compiled]' \
      '-work[print temporary work directory and keep it]' \
      '-x[print the commands]' \
      '-asmflags=[arguments for each go tool asm invocation]: :->asmflags' \
      '-buildmode=[build mode to use]: :->buildmode' \
      '-compiler[name of compiler to use]:name' \
      '-gccgoflags[arguments for gccgo]:args' \
      '-gcflags=[arguments to pass on each go tool compile invocation]: :->gcflags' \
      '-installsuffix[suffix to add to package directory]:suffix' \
      '-ldflags=[arguments to pass on each go tool link invocation]: :->ldflags' \
      '-linkshared[link against shared libraries]' \
      '-pkgdir[install and load all packages from dir]:dir' \
      '-tags=[list of build tags to consider satisfied]:tags' \
      '-toolexec[program to use to invoke toolchain programs]:args' \
      '-debug-actiongraph[Undocumented, unstable debugging flags. action graph]:output filename:_files' \
      '-debug-deprecated-importcfg[Undocumented, unstable debugging flags. deprecated import config]:config'

    case $state in
      asmflags)
        local -a __asm_flags
        __asm_flags=(
        '-D[predefined symbol with optional simple value -D=identifier=value; can be set multiple times]:value'
        '-I[include directory; can be set multiple times]:value'
        '-S[print assembly and machine code]'
        '-debug[dump instructions as they are parsed]'
        '-dynlink[support references to Go symbols defined in other shared libraries]'
        '-e[no limit on number of errors reported]'
        '-o[output file; default foo.o for /a/b/c/foo.s as first argument]:string'
        '-shared[generate code that can be linked into a shared library]'
        '-trimpath[remove prefix from recorded source file paths]:string'
        )
        _values \
          'asmflags' \
          ${__asm_flags[@]}
        ;;

      buildmode)
        local -a __buildmode
        __buildmode=(
        'archive[Build the listed non-main packages into .a files]'
        'c-archive[Build the listed main package, plus all packages it imports, into a C archive file]'
        'c-shared[Build the listed main packages, plus all packages that they import, into C shared libraries]'
        'default[Listed main packages are built into executables and listed non-main packages are built into .a files]'
        'shared[Combine all the listed non-main packages into a single shared library that will be used when building with the -linkshared option]'
        'exe[Build the listed main packages and everything they import into executables]'
        'pie[Build the listed main packages and everything they import into position independent executables (PIE)]'
        'plugin[Build the listed main packages, plus all packages that they import, into a Go plugin]'
        )
        _values \
          'buildmode' \
          ${__buildmode[@]}
        ;;

      gcflags)
        local -a __gcflags
        __gcflags=(
        '-%[debug non-static initializers]'
        '-+[compiling runtime]'
        '-B[disable bounds checking]'
        '-C[disable printing of columns in error messages]'
        '-D[set relative path for local imports]:path:_files'
        '-E[debug symbol export]'
        '-I[add directory to import search path]:directory:_directories'
        '-K[debug missing line numbers]'
        '-N[disable optimizations]'
        '-S[print assembly listing]'
        '-V[print compiler version]'
        '-W[debug parse tree after type checking]'
        '-asmhdr[write assembly header to file]:file:_files'
        '-bench[append benchmark times to file]:file:_files'
        '-blockprofile[write block profile to file]:file:_files'
        '-buildid[record id as the build id in the export metadata]:id'
        '-c[concurrency during compilation, 1 means no concurrency (default 1)]:num concurrency'
        '-complete[compiling complete package (no C or assembly)]'
        '-cpuprofile[write cpu profile to file]:file:_files'
        '-d[print debug information about items in list; try -d help]:list'
        '-dolinkobj[generate linker-specific objects; if false, some invalid code may compile (default true)]'
        '-dwarf[generate DWARF symbols (default true)]'
        '-dynlink[support references to Go symbols defined in other shared libraries]'
        '-e[no limit on number of errors reported]'
        '-f[debug stack frames]'
        '-goversion[required version of the runtime]:go version'
        '-h[halt on error]'
        '-i[debug line number stack]'
        '-importcfg[read import configuration from file]:file:_files'
        '-importmap[add definition of the form source=actual to import map]:definition'
        '-installsuffix[set pkg directory suffix]:suffix'
        '-j[debug runtime-initialized variables]'
        '-l[disable inlining]'
        '-linkobj[write linker-specific object to file]:file:_files'
        '-live[debug liveness analysis]'
        '-m[print optimization decisions]'
        '-memprofile[write memory profile to file]:file:_files'
        '-memprofilerate[set runtime.MemProfileRate to rate]:rate'
        '-msan[build code compatible with C/C++ memory sanitizer]'
        '-mutexprofile[write mutex profile to file]:file:_files'
        '-nolocalimports[reject local (relative) imports]'
        '-o[write output to file]:file:_files'
        '-p[set expected package import path]:path:_files'
        '-pack[write package file instead of object file]'
        '-r[debug generated wrappers]'
        '-race[enable race detector]'
        '-s[warn about composite literals that can be simplified]'
        '-shared[generate code that can be linked into a shared library]'
        '-std[compiling standard library]'
        '-traceprofile[write an execution trace to file]:file:_files'
        '-trimpath[remove prefix from recorded source file paths]:prefix'
        '-u[reject unsafe code]'
        '-v[increase debug verbosity]'
        '-w[debug type checking]'
        '-wb[enable write barrier (default true)]'
        )
        _values \
          'gcflags' \
          ${__gcflags[@]}
        ;;

      ldflags)
        local -a __ldflags
        __ldflags=(
        '-B[add an ELF NT_GNU_BUILD_ID note when using ELF]:note'
        '-C[check Go calls to C code]'
        '-D[set data segment address (default -1)]:address'
        '-E[set entry symbol name]:entry'
        '-H[set header type]:type'
        '-I[use linker as ELF dynamic linker]:linker'
        '-L[add specified directory to library path]:directory:_path_files -/'
        '-R[set address rounding quantum (default -1)]:quantum'
        '-T[set text segment address (default -1)]:address'
        '-V[print version and exit]'
        '-X[add string value definition of the form importpath.name=value]:definition'
        '-a[disassemble output]'
        '-buildid[record id as Go toolchain build id]:id'
        '-buildmode[set build mode]:mode:(archive c-archive c-shared default shared exe pie)'
        '-c[dump call graph]'
        '-cpuprofile[write cpu profile to file]:file:_files'
        '-d[disable dynamic executable]'
        '-dumpdep[dump symbol dependency graph]'
        '-extar[archive program for buildmode=c-archive]:string'
        '-extld[use linker when linking in external mode]:linker'
        '-extldflags[pass flags to external linker]:flags'
        '-f[ignore version mismatch]'
        '-g[disable go package data checks]'
        '-h[halt on error]'
        '-installsuffix[\[suffix\]: set package directory suffix]:suffix'
        '-k[set field tracking symbol]:symbol'
        '-libgcc[compiler support lib for internal linking; use "none" to disable]:string'
        '-linkmode[set link mode (internal, external, auto)]:mode(internal external auto)'
        '-linkshared[link against installed Go shared libraries]'
        '-memprofile[write memory profile to file]:file:_files'
        '-memprofilerate[set runtime.MemProfileRate to rate]:rate'
        '-msan[enable MSan interface]'
        '-n[dump symbol table]'
        '-o[write output to file]:file:_files'
        '-r[set the ELF dynamic linker search path to dir1:dir2:...]:path:_path_files'
        '-race[enable race detector]'
        '-s[disable symbol table]'
        '-shared[generate shared object (implies -linkmode external)]'
        '-tmpdir[use directory for temporary files]:directory:_path_files -/'
        '-u[reject unsafe packages]'
        '-v[print link trace]'
        '-w[disable DWARF generation]'
        )
        _values \
          'ldflags' \
          ${__ldflags[@]}
        ;;
    esac
  }

  __maintenance_flags() {
    _arguments \
      '-init[initializes and writes a new go.mod to the current directory]' \
      "-module[changes (or, with -init, sets) the module's path]" \
      '-require[add a requirement on the given module path and version.]:path@version:__go_packages' \
      '-droprequire[drop a requirement on the given module path and version.]:path:__go_packages' \
      '-exclude[add an exclusion for the given module path and version.]:path@version:__go_packages' \
      '-dropexclude[drop an exclusion for the given module path and version.]:path@version:__go_packages' \
      '-replace[add a replacement of the given module path and version pair.]:old@v=new@w:__go_packages' \
      '-dropreplace[drop a replacement of the given module path and version pair.]:old@v:__go_packages' \
      '-fmt[reformats the go.mod file without making other changes.]' \
      '-graph[prints the module requirement graph \(with replacements applied\) in text form.]' \
      '-json[prints the go.mod file in JSON format with Go types.]' \
      '-packages[prints a list of packages in the module.]' \
      '-fix[updates go.mod to use canonical version identifiers and to be semantically consistent.]' \
      '-sync[synchronizes go.mod with the source code in the module.]' \
      "-vendor[resets the module's vendor directory to include all packages needed to build and test all the module's packages.]" \
      '-verify[checks that the dependencies of the current module, which are stored in a local downloaded source cache, have not been modified since being downloaded.]'
  }

  __test_build_flags=(
  '-args[Pass the remainder of the command line to the test binary]'
  '-c[Compile the test binary to pkg.test but do not run it]'
  "-exec=[Run the test binary using 'xprog']:xprog"
  "-json[Convert test output to JSON suitable for automated processing. See 'go doc test2json' for the encoding details]"
  '-i[Install packages that are dependencies of the test]'
  '-o[Compile the test binary to the named file]:binary file name:_files'
  '-vet[Configure the invocation of "go vet" during "go test" to use the comma-separated list of vet checks]:list'
  )

  # TODO(zchee): Support for regexp keyword
  __test_binary_flags=(
  "-bench[Run (sub)benchmarks matching a regular expression]:regexp of Benchmark functions:(.)"
  '-benchmem[Print memory allocation statistics for benchmarks]'
  '-count[Run each test and benchmark n times \(default: 1\)]:count'
  '-cover[Enable coverage analysis]'
  '-covermode[Set the mode for coverage analysis for the packages being tested \(default: set\)]:(set count atomic)'
  '-coverpkg[Apply coverage analysis in each test to the given list of packages]: :__go_packages'
  '-cpu[Specify a list of GOMAXPROCS values for which the tests or benchmarks should be executed]:(1 2 4)'
  '-parallel=[Allow parallel execution of test functions that call t.Parallel]:number of parallel'
  '-run[Run only those tests and examples matching the regular expression]:regexp of Tests or Examples'
  '-short[Tell long-running tests to shorten their run time]'
  '-timeout[If a test runs longer than arg time, panic \(default: 10m\)]:timeout'
  '-v[output log all tests as they are run and print all text from Log and Logf]'
  )

  __test_profile_flags=(
  '-benchtime[Run enough iterations of each benchmark to take arg time]:bench time (specified as a time.Duration: e.g. 1h30s)'
  '-blockprofile[Write a goroutine blocking profile to the specified file]:profile file path:_files'
  '-blockprofilerate[Control the detail provided in goroutine blocking profiles by calling runtime.SetBlockProfileRate]:block profile rate'
  '-coverprofile[Write a coverage profile to the file after all tests have passed]:output filename:_files'
  '-cpuprofile[Write a CPU profile to the specified file before exiting]:cpu profile file path:_files'
  '-memprofile[Write a memory profile to the file after all tests have passed]:memory profile file:_files'
  '-memprofilerate[Enable more precise memory profiles by setting runtime.MemProfileRate]:memory profile rate'
  '-mutexprofile[Enable more precise (and expensive) memory profiles]:mutex profile file:_files'
  '-mutexprofilefraction[Sample 1 in n stack traces of goroutines holding a contended mutex]:mutex fraction'
  '-outputdir[Place output files from profiling in the specified directory]:output directory:_path_files -/'
  '-trace[Write an execution trace to the specified file before exiting]:output trace file path:_files'
  )

  _arguments \
    "1: :{_describe 'command' commands}" \
    '*:: :->args'

  case $state in
    args)
      case $words[1] in
        build)
          _arguments \
            '-o[force build to write to named output file]:file:_files' \
            '-i[installs the packages that are dependencies of the target]' \
            "::build flags:__build_flags" \
            '*: :__go_packages' \
          ;;

        clean)
          _arguments \
            "-i[clean to remove the corresponding installed archive or binary what 'go install' would create.]" \
            '-n[print the remove commands it would execute, but not run them.]' \
            '-r[clean to be applied recursively to all the dependencies of the packages named by the import paths.]' \
            '-x[clean to print remove commands as it executes them.]' \
            '-cache[clean to remove the entire go build cache.]' \
            '-testcache[clean to expire all test results in the go build cache.]' \
            '-modcache[clean to remove the entire module download cache, including unpacked source code of versioned dependencies.]' \
            '*:go packages:__go_packages'

          _alternative ':build flags:__build_flags'
          ;;

        doc)
          _arguments \
            '-c[respect case when matching symbols]' \
            '-cmd[treat a command (package main) like a regular package]' \
            '-u[show docs for unexported and exported symbols and methods]' \
            '*: :__go_packages'
          ;;

        env)
          local -a _envs
          _envs=(
          'GOARCH:The architecture, or processor, for which to compile code.'
          "GOBIN:The directory where 'go install' will install a command."
          'GOCACHE:The directory where the go command will store cached information for reuse in future builds.'
          'GOEXE:It’s the value of the executable suffix. It’s set automatically in build.go.'
          'GOHOSTARCH:The name of the host operating system.'
          'GOHOSTOS:The name of the compilation architecture.'
          'GOOS:The operating system for which to compile code.'
          'GOPATH:Specifies the location of your workspace.'
          'GORACE:Options for the race detector.'
          'GOROOT:The root of the go tree.'
          'GOTMPDIR:The directory where the go command will write temporary source files, packages, and binaries.'
          'GOTOOLDIR:Use by things that want to get to the tool dir. It is explicitly NOT something that is pulled from the environment.'
          "GCCGO:The gccgo command to run for 'go build -compiler=gccgo'."
          'CC:The command to use to compile C code.'
          'CXX:The command to use to compile C++ code.'
          'CGO_ENABLED:Whether the cgo command is supported. Either 0 or 1.'
          'CGO_CFLAGS:Flags that cgo will pass to the compiler when compiling C code.'
          'CGO_CPPFLAGS:Flags that cgo will pass to the compiler when compiling C or C++ code.'
          'CGO_CXXFLAGS:Flags that cgo will pass to the compiler when compiling C++ code.'
          'CGO_FFLAGS:Flags that cgo will pass to the compiler when compiling Fortran code.'
          'CGO_LDFLAGS:Flags that cgo will pass to the compiler when linking.'
          'PKG_CONFIG:Path to pkg-config tool.'
          'GOGCCFLAGS:Flags that gccgo command.'
          )
          _arguments \
            "*: :{_describe 'envs' _envs}" \
          ;;

        fix)
          _arguments \
            '*: :__go_packages'
          ;;

        fmt)
          _arguments \
            '-n[prints commands that would be executed]' \
            '-x[prints commands as they are executed]' \
            '*: :__go_packages'
          ;;

        generate)
          _arguments \
            '-run=[specifies a regular expression to select directives]:regex' \
            '-x[print the commands]' \
            '-n[print the commands but do not run them]' \
            '-v[print the names of packages as they are compiled]' \
            "*:args:{ _alternative ': :__go_packages' _files }"
          ;;

        get)
          local -a get_flags
          get_flags=(
          '-d[instructs get to stop after downloading the packages]'
          '-f[force get -u not to verify that each package has been checked from vcs]'
          '-fix[run the fix tool on the downloaded packages]'
          '-insecure[permit fetching/resolving custom domains]'
          '-t[also download the packages required to build tests]'
          '*: :__go_packages'
          )
          case "$service" in
            go)
              get_flags+='-u[use the network to update the named packages]'
                ;;
            vgo)
              get_flags+='-u[get to download the latest version of dependencies as well]'
                ;;
          esac
          _arguments \
            ${get_flags[@]} \
            "::build flags:__build_flags"
          ;;

        install)
          _arguments \
            '-i[installs the dependencies of the named packages as well]' \
            '*: :__go_packages'
          _alternative ':build flags:__build_flags'
          ;;

        list)
          _arguments \
            '-f[specifies an alternate format for the list]:format' \
            '-json[causes package data to be printed in JSON format.]' \
            '-compiled[list to set CompiledGoFiles to the Go source files presented to the compiler.]' \
            '-deps[list to iterate over not just the named packages but also all their dependencies.]' \
            '-e[changes the handling of erroneous packages, those that cannot be found or are malformed.]' \
            '-export[list to set the Export field to the name of a file containing up-to-date export information for the given package.]' \
            '-find[list to identify the named packages but not resolve their dependencies]' \
            '-test[list to report not only the named packages but also their test binaries]' \
            '-m[list to list modules instead of packages.]' \
            '-u[adds information about available upgrades.]' \
            "-versions[list to set the Module's Versions field to a list of all known versions of that module, ordered according to semantic versioning, earliest to latest.]" \
            "*:go file:{ _alternative ': :__go_packages' _files }"
            _alternative ':build flags:__build_flags'
          ;;

        mod)
          local -a mod_cmds
          mod_cmds=(
          'download:download modules to local cache'
          'edit:edit go.mod from tools or scripts'
          'graph:print module requirement graph'
          'init:initialize new module in current directory'
          'tidy:add missing and remove unused modules'
          'vendor:make vendored copy of dependencies'
          'verify:verify dependencies have expected content'
          'why:explain why packages or modules are needed'
          )

          _arguments \
            "1: :{_describe 'mod subcommands' mod_cmds}" \
            '*:: :->args'

            case $words[1] in
              download)
                _arguments \
                  '-json[download to print a sequence of JSON objects to standard output, describing each downloaded module]' \
                  '*: :__go_packages'
                ;;

              edit)
                _arguments \
                  '-fmt[reformats the go.mod file without making other changes.]' \
                  "-module[changes the module's path \(the go.mod file's module line\).]" \
                  '-require=[add a requirement on the given module path and version.]:path@version:__go_packages' \
                  '-droprequire=[drop a requirement on the given module path and version.]:path:__go_packages' \
                  '-replace=[drop a replacement of the given module path and version pair.]:old\[@v\]=new\[@v\]' \
                  '-dropreplace=[drop a replacement of the given module path and version pair.]:old\[@v\]' \
                  '-print[prints the final go.mod in its text format instead of writing it back to go.mod.]' \
                  '-json[prints the final go.mod file in JSON format instead of writing it back to go.mod.]' \
                  '*::go.mod:_files'
                ;;

              graph)
                ;;

              init)
                _arguments \
                  '*: :__go_packages'
                ;;

              tidy)
                _arguments \
                  '-v[tidy to print information about removed modules to standard error.]'
                ;;

              vendor)
                _arguments \
                  '-v[vendor to print the names of vendored modules and packages to standard error.]'
                ;;

              verify)
                ;;

              why)
                _arguments \
                  '-m[why treats the arguments as a list of modules and finds a path to any package in each of the modules.]' \
                  '-vendor[why to exclude tests of dependencies.]' \
                  '*: :__go_packages'
                ;;
            esac
          ;;

        run)
          _arguments \
            '-exec[invoke the binary using xprog]:xporg' \
            '1:go run file:_go_files'
            _alternative ':build flags:__build_flags'
          ;;

        test)
          _arguments \
            ${__test_build_flags[@]} \
            ${__test_binary_flags[@]} \
            ${__test_profile_flags[@]} \
            '*: :__go_packages'
          _alternative ':build flags:__build_flags'
          ;;

        tool)
          local -a tools
          tools=(
          'addr2line:minimal simulation of the GNU addr2line tool'
          'api:computes the exported API of a set of Go packages'
          'asm:assembles the source file into an object file'
          'buildid:Buildid displays or updates the build ID stored in a Go package or binary. By default, buildid prints the build ID found in the named file'
          'cgo:enables the creation of Go packages that call C code'
          'compile:compiles a single Go package comprising the files named on the command line'
          'cover:analyzing the coverage profiles generated by go test -coverprofile'
          'dist:bootstrapping tool for the Go distribution'
          'doc:Show the documentation for the package, symbol, and method'
          'fix:finds Go programs that use old APIs and rewrites them to use newer ones'
          'link:reads the Go archive or object for a package, and combines them into an executable binary'
          'nm:lists the symbols defined or used by an object file, archive, or executable'
          'objdump:disassembles executable files'
          'pack:simple version of the traditional Unix ar tool'
          'pprof:interprets and displays profiles of Go programs'
          'trace:viewing trace files'
          'vet:examines Go source code and reports suspicious constructs'
          )

          _arguments \
            '-n[print command that would be executed]' \
            "1: :{_describe 'tool' tools}" \
            '*:: :->args'

          case $state in
            args)
              case $words[1] in
                addr2line)
                  _arguments \
                    '*:binary:_object_files'
                  ;;

                api)
                  _arguments \
                    '-allow_new[allow API additions (default true)]' \
                    '-c[optional comma-separated filename(s) to check API against]:string' \ 
                    '-contexts[optional comma-separated list of <goos>-<goarch>[-cgo] to override default contexts]:string' \
                    '-except[optional filename of packages that are allowed to change without triggering a failure in the tool]:string' \
                    '-next[optional filename of tentative upcoming API features for the next release]:string' \
                    '-v[verbose debugging]'
                  ;;

                asm)
                  _arguments \
                    ${__asm_flags[@]}
                  ;;

                buildid)
                  _arguments \
                    '-w[rewrites the build ID found in the file to accurately record a content hash of the file]:_files'
                  ;;

                cgo)
                  _arguments \
                    '-debug-define[print relevant #defines]' \
                    '-debug-gcc[print gcc invocations]' \
                    '-dynimport[if non-empty, print dynamic import data for that file]:output filename (string)' \
                    '-dynlinker[record dynamic linker information in -dynimport mode]' \
                    '-dynout[write -dynimport output to this file]:output filename (string)' \
                    '-dynpackage[set Go package for -dynimport output]:string' \
                    '-exportheader[where to write export header if any exported functions]:export header filename (string)' \
                    '-gccgo[generate files for use with gccgo]' \
                    '-gccgopkgpath[-fgo-pkgpath option used with gccgo]:-fgo-pkgpath (string)'\
                    '-gccgoprefix[-fgo-prefix option used with gccgo]:-fgo-prefix (string)' \
                    '-godefs[for bootstrap: write Go definitions for C file to standard output]' \
                    '-import_runtime_cgo[import runtime/cgo in generated code]' \
                    '-import_syscall[import syscall in generated code]' \
                    '-importpath[import path of package being built]:import path (string)' \
                    '-objdir[object directory]:directory path (string)' \
                    '-srcdir[source directory]:directory path (string)' \
                    '*:go file:_files -g "*.go(-.)"'
                  ;;

                compile)
                  _arguments \
                    ${__gcflags[@]} \
                    '*:file:_path_files -g "*.go"'
                  ;;

                cover)
                  if (( CURRENT == 2 )); then
                    _arguments \
                      '-func=[output coverage profile information for each function]:string' \
                      '-html=[generate HTML representation of coverage profile]:file:_files' \
                      '-mode=[coverage mode]:mode:(set count atomic)'
                  fi

                  _arguments \
                    '-o[file for output]:file:_files' \
                    '-var=[name of coverage variable to generate]:coverage var name' \
                    '*:file:_path_files -g "*.go"'
                  ;;

                #----------------------------

                doc)
                  _arguments \
                    '-c[respect case when matching symbols]' \
                    '-cmd[treat a command (package main) like a regular package]' \
                    '-u[show docs for unexported and exported symbols and methods]' \
                    ;;

                fix)
                  _arguments \
                    '-diff[display diffs instead of rewriting files]' \
                    '-force[force fixes to run even if the code looks updated]:string' \
                    '-r[restrict the rewrites]:string' \
                    '*:files:_files'
                  ;;

                link)
                  _arguments \
                    '-B[add an ELF NT_GNU_BUILD_ID note when using ELF]:note' \
                    '-C[check Go calls to C code]' \
                    '-D[set data segment address (default -1)]:address' \
                    '-E[set entry symbol name]:entry' \
                    '-H[set header type]:type' \
                    '-I[use linker as ELF dynamic linker]:linker' \
                    '-L[add specified directory to library path]:directory' \
                    '-R[set address rounding quantum (default -1)]:quantum' \
                    '-T[set text segment address (default -1)]:address' \
                    '-V[print version and exit]' \
                    '-W[disassemble input]' \
                    '-X[add string value definition]:definition' \
                    '-a[disassemble output]' \
                    '-buildid[record id as Go toolchain build id]:id' \
                    '-buildmode[set build mode]:mode' \
                    '-c[dump call graph]' \
                    '-cpuprofile[write cpu profile to file]:file' \
                    '-d[disable dynamic executable]' \
                    '-extld[use linker when linking in external mode]:linker' \
                    '-extldflags[pass flags to external linker]:flags' \
                    '-f[ignore version mismatch]' \
                    '-g[disable go package data checks]' \
                    '-h[halt on error]' \
                    '-installsuffix[set package directory suffix]:suffix' \
                    '-k[set field tracking symbol]:symbol' \
                    '-linkmode[set link mode]:mode:(internal external auto)' \
                    '-linkshared[link against installed Go shared libraries]' \
                    '-memprofile[write memory profile to file]:file' \
                    '-memprofilerate[set runtime.MemProfileRate to rate]:rate' \
                    '-n[dump symbol table]' \
                    '-o[write output to file]:file' \
                    '-r[set the ELF dynamic linker search path to dir1:dir2:...]:path' \
                    '-race[enable race detector]' \
                    '-s[disable symbol table]' \
                    '-shared[generate shared object (implies -linkmode external)]' \
                    '-tmpdir[use directory for temporary files]:directory' \
                    '-u[reject unsafe packages]' \
                    '-v[print link trace]' \
                    '-w[disable DWARF generation]' \
                    '*:files:_files'
                  ;;

                objdump)
                  _arguments \
                    '-s[only dump symbols matching this regexp]:regexp' \
                    '*:files:_files'
                  ;;

                pack)
                  _arguments '1:ops:(c p r t x)' '::verbose:(v)' ':files:_files'
                  ;;

                pprof)
                  local -a output_format output_file_parameter output_granularity comparison sorting
                  local -a dynamic_profile profile_trimming sample_index sample_heap sample_contention
                  local -a filtering miscellaneous

                  # Output format (only set one)
                  output_format=(
                  '(-disasm -dot -eog -evince -gif -gv -list -pdf -peak -png -proto -ps -raw -svg -tags -text -top -tree -web -weblist)-callgrind[Outputs a graph in callgrind format]'
                  '(-callgrind -dot -eog -evince -gif -gv -list -pdf -peak -png -proto -ps -raw -svg -tags -text -top -tree -web -weblist)-disasm=[Output annotated assembly for functions matching regexp or address]:functions regexp pattern'
                  '(-callgrind -disasm -eog -evince -gif -gv -list -pdf -peak -png -proto -ps -raw -svg -tags -text -top -tree -web -weblist)-dot[Outputs a graph in DOT format]'
                  '(-callgrind -disasm -dot -evince -gif -gv -list -pdf -peak -png -proto -ps -raw -svg -tags -text -top -tree -web -weblist)-eog[Visualize graph through eog]'
                  '(-callgrind -disasm -dot -eog -gif -gv -list -pdf -peak -png -proto -ps -raw -svg -tags -text -top -tree -web -weblist)-evince[Visualize graph through evince]'
                  '(-callgrind -disasm -dot -eog -evince -gv -list -pdf -peak -png -proto -ps -raw -svg -tags -text -top -tree -web -weblist)-gif[Outputs a graph image in GIF format]'
                  '(-callgrind -disasm -dot -eog -evince -gif -list -pdf -peak -png -proto -ps -raw -svg -tags -text -top -tree -web -weblist)-gv[Visualize graph through gv]'
                  '(-callgrind -disasm -dot -eog -evince -gif -gv -pdf -peak -png -proto -ps -raw -svg -tags -text -top -tree -web -weblist)-list=[Output annotated source for functions matching regexp]:functions regexp pattern'
                  '(-callgrind -disasm -dot -eog -evince -gif -gv -list -peak -png -proto -ps -raw -svg -tags -text -top -tree -web -weblist)-pdf[Outputs a graph in PDF format]'
                  '(-callgrind -disasm -dot -eog -evince -gif -gv -list -pdf -png -proto -ps -raw -svg -tags -text -top -tree -web -weblist)-peek=[Output callers/callees of functions matching regexp]:functions regexp pattern'
                  '(-callgrind -disasm -dot -eog -evince -gif -gv -list -pdf -peak -proto -ps -raw -svg -tags -text -top -tree -web -weblist)-png[Outputs a graph image in PNG format]'
                  '(-callgrind -disasm -dot -eog -evince -gif -gv -list -pdf -peak -png -ps -raw -svg -tags -text -top -tree -web -weblist)-proto[Outputs the profile in compressed protobuf format]'
                  '(-callgrind -disasm -dot -eog -evince -gif -gv -list -pdf -peak -png -proto -raw -svg -tags -text -top -tree -web -weblist)-ps[Outputs a graph in PS format]'
                  '(-callgrind -disasm -dot -eog -evince -gif -gv -list -pdf -peak -png -proto -ps -svg -tags -text -top -tree -web -weblist)-raw[Outputs a text representation of the raw profile]'
                  '(-callgrind -disasm -dot -eog -evince -gif -gv -list -pdf -peak -png -proto -ps -raw -tags -text -top -tree -web -weblist)-svg[Outputs a graph in SVG format]'
                  '(-callgrind -disasm -dot -eog -evince -gif -gv -list -pdf -peak -png -proto -ps -raw -svg -text -top -tree -web -weblist)-tags[Outputs all tags in the profile]'
                  '(-callgrind -disasm -dot -eog -evince -gif -gv -list -pdf -peak -png -proto -ps -raw -svg -tags -top -tree -web -weblist)-text[Outputs top entries in text form]'
                  '(-callgrind -disasm -dot -eog -evince -gif -gv -list -pdf -peak -png -proto -ps -raw -svg -tags -text -tree -web -weblist)-top[Outputs top entries in text form]'
                  '(-callgrind -disasm -dot -eog -evince -gif -gv -list -pdf -peak -png -proto -ps -raw -svg -tags -text -top -web -weblist)-tree[Outputs a text rendering of call graph]'
                  '(-callgrind -disasm -dot -eog -evince -gif -gv -list -pdf -peak -png -proto -ps -raw -svg -tags -text -top -tree -weblist)-web[Visualize graph through web browser]'
                  '(-callgrind -disasm -dot -eog -evince -gif -gv -list -pdf -peak -png -proto -ps -raw -svg -tags -text -top -tree -web)-weblist=[Output annotated source in HTML for functions matching regexp or address]:functions regexp pattern'
                  )
                  output_file_parameter=(
                  '-output:Generate output on file f (stdout by default)'
                  )
                  # Output granularity (only set one)
                  output_granularity=(
                  '(-files -lines -addresses)-functions[Report at function level \[default\]]'
                  '(-functions -lines -addresses)-files[Report at source file level]'
                  '(-functions -files -addresses)-lines[Report at source line level]'
                  '(-functions -files -lines)-addresses[Report at address level]'
                  )
                  comparison=(
                  '-base:Show delta from this profile'
                  '-drop_negative:Ignore negative differences'
                  )
                  sorting=(
                  '-cum:Sort by cumulative data'
                  )
                  dynamic_profile=(
                  '-seconds:Length of time for dynamic profiles'
                  )
                  profile_trimming=(
                  '-nodecount:Max number of nodes to show'
                  '-nodefraction:Hide nodes below <f>*total'
                  '-edgefraction:Hide edges below <f>*total'
                  )
                  sample_index=(
                  '-sample_index:Index of sample value to display'
                  '-mean:Average sample value over first value'
                  )
                  sample_heap=(
                  '-inuse_space:Display in-use memory size'
                  '-inuse_objects:Display in-use object counts'
                  '-alloc_space:Display allocated memory size'
                  '-alloc_objects:Display allocated object counts'
                  )
                  sample_contention=(
                  '-total_delay:Display total delay at each region'
                  '-contentions:Display number of delays at each region'
                  '-mean_delay:Display mean delay at each region'
                  )
                  filtering=(
                  '-runtime:Show runtime call frames in memory profiles'
                  '-focus:Restricts to paths going through a node matching regexp'
                  '-ignore:Skips paths going through any nodes matching regexp'
                  '-tagfocus:Restrict to samples tagged with key:value matching regexp'
                  '-tagignore:Discard samples tagged with key:value matching regexp'
                  )
                  miscellaneous=(
                  '-call_tree:Generate a context-sensitive call tree'
                  '-unit:Convert all samples to unit u for display'
                  '-divide_by:Scale all samples by dividing them by f'
                  '-buildid:Override build id for main binary in profile'
                  '-tools:Search path for object-level tools'
                  '-help:This message'
                  )

                  _arguments \
                    '1:target binary:_files' \
                    '*:profile data:_files' \
                    $output_format \
                    $output_granularity

                  _describe -t output_file_parameter "Output file parameters \(for file-based output formats\):" output_file_parameter
                  _describe -t output_granularity "Output granularity \(only set one\):" output_granularity
                  _describe -t comparison "Comparison options:" comparison
                  _describe -t sorting "Output options:" sorting
                  _describe -t dynamic_profile "Dynamic profile options:" dynamic_profile
                  _describe -t profile_trimming "Profile trimming options:" profile_trimming
                  _describe -t sample_index "Sample value selection option by index:" sample_index
                  _describe -t sample_heap "Sample value selection option for heap profiles:" sample_heap
                  _describe -t sample_contention "Sample value selection option for contention profiles:" sample_contention
                  _describe -t filtering "Filtering options:" filtering
                  _describe -t miscellaneous "miscellaneous:" miscellaneous
                  ;;

                trace)
                  _arguments \
                    '-http=[HTTP service address]:addr' \
                    '*:files:_files'
                  ;;

                vet)
                  _arguments \
                    '-all[check everything]' \
                    '-asmdecl[check assembly against Go declarations]' \
                    '-assign[check for useless assignments]' \
                    '-atomic[check for common mistaken usages of the sync/atomic]' \
                    '-bool[check for mistakes involving boolean operators]' \
                    '-buildtags[check that +build tags are valid]' \
                    '-composites[check that composite literals used field-keyed elements]' \
                    '-compositewhitelist[use composite white list]' \
                    '-copylocks[check that locks are not passed by value]' \
                    '-methods[check that canonically named methods are canonically defined]' \
                    '-nilfunc[check for comparisons between functions and nil]' \
                    '-printf[check printf-like invocations]' \
                    '-printfuncs[print function names to check]:string' \
                    '-rangeloops[check that range loop variables are used correctly]' \
                    '-shadow[check for shadowed variables]' \
                    '-shadowstrict[whether to be strict about shadowing]' \
                    '-shift[check for useless shifts]' \
                    '-structtags[check that struct field tags have canonical format]' \
                    '-tags[list of build tags to apply when parsing]:list' \
                    '-test[for testing only: sets -all and -shadow]' \
                    '-unreachable[check for unreachable code]' \
                    '-unsafeptr[check for misuse of unsafe.Pointer]' \
                    '-unusedfuncs[list of functions whose results must be used]:string' \
                    '-unusedresult[check for unused result of calls to functions in -unusedfuncs]' \
                    '-unusedstringmethods[list of methods whose results must be used]:string' \
                    '-v[verbose]' \
                    '*:files:_files'
                  ;;

                yacc)
                  _arguments \
                    '-o[output]:output' \
                    '-v[parsetable]:parsetable' \
                    '*:files:_files'
                  ;;
              esac
              ;;
          esac
          ;;

        vet)
          _values \
            'vet flags' \
            '-n[print commands that would be executed]' \
            '-x[prints commands as they are executed]' \
            '*:build flags:__go_packages'
          _alternative ':build flags:__build_flags'
          ;;

        help)
          local -a topics
          topics=(
          'c:calling between Go and C'
          'buildmode:description of build modes'
          'filetype:file types'
          'gopath:GOPATH environment variable'
          'environment:environment variables'
          'importpath:import path syntax'
          'packages:description of package lists'
          'testflag:description of testing flags'
          'testfunc:description of testing functions'
          )
          _arguments "1: :{_describe 'command' commands -- topics}"
          ;;
      esac
      ;;
  esac
}


_go "$*"

# vim:ft=zsh:et:sts=2:sw=2
