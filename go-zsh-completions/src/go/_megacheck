#compdef megacheck

# -----------------------------------------------------------------------------
# The BSD-3-Clause License
#
# Copyright (c) 2018, Koichi Shiraishi
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of que nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
# -----------------------------------------------------------------------------
#
# honnef.co/go/tools/cmd/megacheck
#
# -----------------------------------------------------------------------------
#
# Usage of megacheck:
# 	megacheck [flags] # runs on package in current directory
# 	megacheck [flags] packages
# 	megacheck [flags] directory
# 	megacheck [flags] files... # must be a single package
# Flags:
#   -f format
#     	Output format (valid choices are 'text' and 'json') (default "text")
#   -go version
#     	Target Go version in the format '1.x' (default 1.11)
#   -ignore string
#     	Space separated list of checks to ignore, in the following format: 'import/path/file.go:Check1,Check2,...' Both the import path and file name sections support globbing, e.g. 'os/exec/*_test.go'
#   -min_confidence float
#     	Deprecated; use -ignore instead
#   -show-ignored
#     	Don't filter ignored problems
#   -simple.enabled
#     	Run gosimple (default true)
#   -simple.exit-non-zero
#     	Exit non-zero if any problems were found
#   -simple.generated
#     	Check generated code
#   -staticcheck.enabled
#     	Run staticcheck (default true)
#   -staticcheck.exit-non-zero
#     	Exit non-zero if any problems were found (default true)
#   -staticcheck.generated
#     	Check generated code (only applies to a subset of checks)
#   -tags build tags
#     	List of build tags
#   -tests
#     	Include tests (default true)
#   -unused.consts
#     	Report unused constants (default true)
#   -unused.enabled
#     	Run unused (default true)
#   -unused.exit-non-zero
#     	Exit non-zero if any problems were found (default true)
#   -unused.exported
#     	Treat arguments as a program and report unused exported identifiers
#   -unused.fields
#     	Report unused fields (default true)
#   -unused.funcs
#     	Report unused functions and methods (default true)
#   -unused.reflect
#     	Consider identifiers as used when it's likely they'll be accessed via reflection (default true)
#   -unused.types
#     	Report unused types (default true)
#   -unused.vars
#     	Report unused variables (default true)
#   -version
#     	Print version and exit
#
# -----------------------------------------------------------------------------

function _megacheck() {
  local context curcontext=$curcontext state line ret=1
  declare -A opt_args

  _go_files() {
    _files -g "*.go(-.)"
  }

  _go_packages() {
    local -a gopaths
    gopaths=("${(s/:/)$(go env GOPATH)}")
    gopaths+=("$(go env GOROOT)")
    for p in $gopaths; do
      _alternative ':go packages:_path_files -W "$p/src" -/'
    done
    _alternative '*:go file:_go_files'
  }

  _arguments -C \
    "-f[Output format (valid choices are 'text' and 'json') \(default \"text\"\)]:format:(text json)" \
    "-go[Target Go version in the format '1.x']:version:" \
    '-ignore[Space separated list of checks to ignore]:igoner path:_files' \
    "-show-ignored[Don't filter ignored problems]" \
    '-simple.enabled[Run gosimple \(default true\)]' \
    '-simple.exit-non-zero[Exit non-zero on simple if any problems were found]' \
    '-simple.generated[Check generated code]' \
    '-staticcheck.enabled[Run staticcheck \(default true\)]' \
    '-staticcheck.exit-non-zero[Exit non-zero on staticcheck if any problems were found \(default true\)]' \
    '-staticcheck.generated[Check generated code \(only applies to a subset of checks\)]' \
    '-tags[List of build tags]:build tags' \
    '-tests[Include tests \(default true\)]' \
    '-unused.consts[Report unused constants \(default true\)]' \
    '-unused.enabled[Run unused \(default true\)]' \
    '-unused.exit-non-zero[Exit non-zero on unused if any problems were found \(default true\)]' \
    '-unused.exported[Treat arguments as a program and report unused exported identifiers]' \
    '-unused.fields[Report unused fields \(default true\)]' \
    '-unused.funcs[Report unused functions and methods \(default true\)]' \
    "-unused.reflect[Consider identifiers as used when it's likely they'll be accessed via reflection \(default true\)]" \
    '-unused.types[Report unused types \(default true\)]' \
    '-unused.vars[Report unused variables \(default true\)]' \
    '-version[Print version and exit]' \
    '*:target:_go_packages' \
    && ret=0

  return ret
}

_megacheck "$*"

# vim:ft=zsh:et:sts=2:sw=2
